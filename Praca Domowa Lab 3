{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Kopia notatnika cwiczenia_3a_regresja.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MichalSien/Michal-Lab/blob/main/Praca%20Domowa%20Lab%203\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RQH7zbVF8v6g"
      },
      "source": [
        "\n",
        "\n",
        "# **A regression example**\n",
        "\n",
        "Common type of machine learning problem is \"regression\", which consists of predicting a continuous value instead of a discrete label. For instance, predicting the temperature tomorrow, given meteorological data, or predicting the time that a software project will take to complete, given its specifications.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6Zl5s4feH_v4"
      },
      "source": [
        "\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Activation, Dense, Dropout\n",
        "from keras import optimizers\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qvsAzyjTI3Ie"
      },
      "source": [
        "**1-dimensional data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4fEyq6reI8Vi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7da621af-14a3-4ac9-94e1-61cfc1313cf7"
      },
      "source": [
        "def funct(x):\n",
        "  return x*x*np.sin(x)+np.log(2*x)\n",
        "\n",
        "size = 200\n",
        "low=0\n",
        "high=12\n",
        "error=50\n",
        "\n",
        "XX_train = np.random.uniform(low=low, high=high, size=size)\n",
        "XX_test = np.random.uniform(low=low, high=high, size=size)\n",
        "yy_train = funct(XX_train) + np.random.normal(0., error, size)\n",
        "yy_test = funct(XX_test) + np.random.normal(0., error, size)\n",
        "\n",
        "print(XX_train.shape, yy_train.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(100,) (100,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UK9f3EkaNLKy"
      },
      "source": [
        "Plot the function and data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jc4wlpu6NPib",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 479
        },
        "outputId": "da812fea-e9b6-42a5-a814-414a60450fa3"
      },
      "source": [
        "fig = plt.figure(figsize=(7,7))\n",
        "\n",
        "plt.plot(XX_train,yy_train, 'o', color='blue', label='Training points')\n",
        "plt.plot(XX_test,yy_test, 'o', color='green', label='Testing points')\n",
        "\n",
        "points = np.linspace(low, high,num=100)\n",
        "plt.plot(points, funct(points),  color='red', label='Function')\n",
        "plt.legend()\n",
        "\n",
        "\n",
        "plt.show"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: RuntimeWarning: divide by zero encountered in log\n",
            "  \n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 157
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 504x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CS7hU2fiZHzl"
      },
      "source": [
        "\n",
        "**Preparing the data**\n",
        "\n",
        "It would be problematic to feed into a neural network values that all take wildly different ranges. The network might be able to automatically adapt to such heterogeneous data, but it would definitely make learning more difficult. A widespread best practice to deal with such data is to do feature-wise normalization: for each feature in the input data (a column in the input data matrix), we will subtract the mean of the feature and divide by the standard deviation, so that the feature will be centered around 0 and will have a unit standard deviation. This is easily done in Numpy:\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cNzLzYMFZNab"
      },
      "source": [
        "# Tutaj należy znormalizować dane, i.e. \n",
        "# - odjąć średnią\n",
        "# - podzielić przez odchylenie standardowe\n",
        "\n",
        "mean = XX_train.mean(axis=0)\n",
        "XX_train_n = XX_train-mean\n",
        "std = XX_train_n.std(axis=0)\n",
        "XX_train_n /= std\n",
        "\n",
        "# to samo dla X_test\n",
        "XX_test_n = XX_test - mean\n",
        "XX_test_n /= std\n",
        "\n",
        "\n",
        "# A teraz to samo dla yy_train i yy_test\n",
        "\n",
        "mean1 = yy_train.mean(axis=0)\n",
        "yy_train_n = yy_train-mean1\n",
        "std1 = yy_train_n.std(axis=0)\n",
        "yy_train_n /= std1\n",
        "\n",
        "yy_test_n = yy_test - mean1\n",
        "yy_test_n /= std1\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G1akSHhNWUOI"
      },
      "source": [
        "Define neural network"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zKnzCxTvWlLF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f5132f4a-1a31-4867-8b31-af0836e67139"
      },
      "source": [
        "# Zbudować sieć neuronową, działa: dwie warstwy ukryte, aktywacja relu\n",
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "\n",
        "model0 = Sequential(name='network')\n",
        "model0.add(layers.Dense(2048, activation='relu', input_shape=(1,)))\n",
        "model0.add(layers.Dropout(0.2))\n",
        "model0.add(layers.Dense(2048, activation='relu'))\n",
        "model0.add(layers.Dropout(0.2))\n",
        "model0.add(layers.Dense(1, activation='linear'))\n",
        "\n",
        "model0.compile(optimizer='adam',\n",
        "                  loss='mean_squared_error',\n",
        "                  metrics=['mse'])\n",
        "\n",
        "model0.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"network\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense_57 (Dense)             (None, 2048)              4096      \n",
            "_________________________________________________________________\n",
            "dense_58 (Dense)             (None, 2048)              4196352   \n",
            "_________________________________________________________________\n",
            "dense_59 (Dense)             (None, 1)                 2049      \n",
            "=================================================================\n",
            "Total params: 4,202,497\n",
            "Trainable params: 4,202,497\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N6CIlc58-R1k"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u9pQ61rwWX9F"
      },
      "source": [
        "Train neural network\n",
        "\n",
        "For regression problems, mean squared error (MSE) is often employed\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hos2Vg10XBU3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4ba6ebae-e9d2-467e-c35e-814546b6f23d"
      },
      "source": [
        "# compile and train NN\n",
        "# Uwaga: dla regresji używamy: loss = 'mean_squared_error'   oraz metrics = ['mse']\n",
        "\n",
        "history = model0.fit(XX_train_n, yy_train_n,\n",
        "                                  epochs=200,\n",
        "                                  batch_size=512,\n",
        "                                  validation_data=(XX_test_n, yy_test_n))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/200\n",
            "1/1 [==============================] - 0s 106ms/step - loss: 0.9895 - mse: 0.9895 - val_loss: 0.7809 - val_mse: 0.7809\n",
            "Epoch 2/200\n",
            "1/1 [==============================] - 0s 312ms/step - loss: 0.9362 - mse: 0.9362 - val_loss: 0.5816 - val_mse: 0.5816\n",
            "Epoch 3/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.8355 - mse: 0.8355 - val_loss: 0.5490 - val_mse: 0.5490\n",
            "Epoch 4/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.8037 - mse: 0.8037 - val_loss: 0.5734 - val_mse: 0.5734\n",
            "Epoch 5/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.7884 - mse: 0.7884 - val_loss: 0.5806 - val_mse: 0.5806\n",
            "Epoch 6/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.7689 - mse: 0.7689 - val_loss: 0.5687 - val_mse: 0.5687\n",
            "Epoch 7/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.7477 - mse: 0.7477 - val_loss: 0.5394 - val_mse: 0.5394\n",
            "Epoch 8/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.7167 - mse: 0.7167 - val_loss: 0.5011 - val_mse: 0.5011\n",
            "Epoch 9/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.6797 - mse: 0.6797 - val_loss: 0.4623 - val_mse: 0.4623\n",
            "Epoch 10/200\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.6439 - mse: 0.6439 - val_loss: 0.4287 - val_mse: 0.4287\n",
            "Epoch 11/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.6125 - mse: 0.6125 - val_loss: 0.4028 - val_mse: 0.4028\n",
            "Epoch 12/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.5839 - mse: 0.5839 - val_loss: 0.3832 - val_mse: 0.3832\n",
            "Epoch 13/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.5524 - mse: 0.5524 - val_loss: 0.3682 - val_mse: 0.3682\n",
            "Epoch 14/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.5162 - mse: 0.5162 - val_loss: 0.3569 - val_mse: 0.3569\n",
            "Epoch 15/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.4795 - mse: 0.4795 - val_loss: 0.3469 - val_mse: 0.3469\n",
            "Epoch 16/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.4464 - mse: 0.4464 - val_loss: 0.3330 - val_mse: 0.3330\n",
            "Epoch 17/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.4157 - mse: 0.4157 - val_loss: 0.3126 - val_mse: 0.3126\n",
            "Epoch 18/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.3850 - mse: 0.3850 - val_loss: 0.2891 - val_mse: 0.2891\n",
            "Epoch 19/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.3560 - mse: 0.3560 - val_loss: 0.2685 - val_mse: 0.2685\n",
            "Epoch 20/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.3316 - mse: 0.3316 - val_loss: 0.2540 - val_mse: 0.2540\n",
            "Epoch 21/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.3096 - mse: 0.3096 - val_loss: 0.2456 - val_mse: 0.2456\n",
            "Epoch 22/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.2875 - mse: 0.2875 - val_loss: 0.2416 - val_mse: 0.2416\n",
            "Epoch 23/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.2681 - mse: 0.2681 - val_loss: 0.2357 - val_mse: 0.2357\n",
            "Epoch 24/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.2514 - mse: 0.2514 - val_loss: 0.2205 - val_mse: 0.2205\n",
            "Epoch 25/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.2336 - mse: 0.2336 - val_loss: 0.2020 - val_mse: 0.2020\n",
            "Epoch 26/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.2182 - mse: 0.2182 - val_loss: 0.1897 - val_mse: 0.1897\n",
            "Epoch 27/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.2056 - mse: 0.2056 - val_loss: 0.1862 - val_mse: 0.1862\n",
            "Epoch 28/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.1933 - mse: 0.1933 - val_loss: 0.1847 - val_mse: 0.1847\n",
            "Epoch 29/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.1852 - mse: 0.1852 - val_loss: 0.1719 - val_mse: 0.1719\n",
            "Epoch 30/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.1764 - mse: 0.1764 - val_loss: 0.1564 - val_mse: 0.1564\n",
            "Epoch 31/200\n",
            "1/1 [==============================] - 0s 22ms/step - loss: 0.1700 - mse: 0.1700 - val_loss: 0.1501 - val_mse: 0.1501\n",
            "Epoch 32/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1633 - mse: 0.1633 - val_loss: 0.1497 - val_mse: 0.1497\n",
            "Epoch 33/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1575 - mse: 0.1575 - val_loss: 0.1385 - val_mse: 0.1385\n",
            "Epoch 34/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1500 - mse: 0.1500 - val_loss: 0.1238 - val_mse: 0.1238\n",
            "Epoch 35/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1429 - mse: 0.1429 - val_loss: 0.1201 - val_mse: 0.1201\n",
            "Epoch 36/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1354 - mse: 0.1354 - val_loss: 0.1204 - val_mse: 0.1204\n",
            "Epoch 37/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1300 - mse: 0.1300 - val_loss: 0.1102 - val_mse: 0.1102\n",
            "Epoch 38/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.1246 - mse: 0.1246 - val_loss: 0.1044 - val_mse: 0.1044\n",
            "Epoch 39/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1223 - mse: 0.1223 - val_loss: 0.1102 - val_mse: 0.1102\n",
            "Epoch 40/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1212 - mse: 0.1212 - val_loss: 0.1100 - val_mse: 0.1100\n",
            "Epoch 41/200\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.1217 - mse: 0.1217 - val_loss: 0.1059 - val_mse: 0.1059\n",
            "Epoch 42/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.1230 - mse: 0.1230 - val_loss: 0.1113 - val_mse: 0.1113\n",
            "Epoch 43/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1228 - mse: 0.1228 - val_loss: 0.1124 - val_mse: 0.1124\n",
            "Epoch 44/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.1221 - mse: 0.1221 - val_loss: 0.1046 - val_mse: 0.1046\n",
            "Epoch 45/200\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.1204 - mse: 0.1204 - val_loss: 0.1052 - val_mse: 0.1052\n",
            "Epoch 46/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.1181 - mse: 0.1181 - val_loss: 0.1054 - val_mse: 0.1054\n",
            "Epoch 47/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.1166 - mse: 0.1166 - val_loss: 0.0981 - val_mse: 0.0981\n",
            "Epoch 48/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1155 - mse: 0.1155 - val_loss: 0.0999 - val_mse: 0.0999\n",
            "Epoch 49/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1149 - mse: 0.1149 - val_loss: 0.1002 - val_mse: 0.1002\n",
            "Epoch 50/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.1152 - mse: 0.1152 - val_loss: 0.0954 - val_mse: 0.0954\n",
            "Epoch 51/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.1156 - mse: 0.1156 - val_loss: 0.0996 - val_mse: 0.0996\n",
            "Epoch 52/200\n",
            "1/1 [==============================] - 0s 14ms/step - loss: 0.1153 - mse: 0.1153 - val_loss: 0.0970 - val_mse: 0.0970\n",
            "Epoch 53/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.1145 - mse: 0.1145 - val_loss: 0.0957 - val_mse: 0.0957\n",
            "Epoch 54/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.1137 - mse: 0.1137 - val_loss: 0.1004 - val_mse: 0.1004\n",
            "Epoch 55/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.1128 - mse: 0.1128 - val_loss: 0.0965 - val_mse: 0.0965\n",
            "Epoch 56/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.1118 - mse: 0.1118 - val_loss: 0.1007 - val_mse: 0.1007\n",
            "Epoch 57/200\n",
            "1/1 [==============================] - 0s 14ms/step - loss: 0.1110 - mse: 0.1110 - val_loss: 0.1009 - val_mse: 0.1009\n",
            "Epoch 58/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1105 - mse: 0.1105 - val_loss: 0.0993 - val_mse: 0.0993\n",
            "Epoch 59/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.1103 - mse: 0.1103 - val_loss: 0.1025 - val_mse: 0.1025\n",
            "Epoch 60/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.1098 - mse: 0.1098 - val_loss: 0.0966 - val_mse: 0.0966\n",
            "Epoch 61/200\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.1090 - mse: 0.1090 - val_loss: 0.0981 - val_mse: 0.0981\n",
            "Epoch 62/200\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.1079 - mse: 0.1079 - val_loss: 0.0933 - val_mse: 0.0933\n",
            "Epoch 63/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.1069 - mse: 0.1069 - val_loss: 0.0918 - val_mse: 0.0918\n",
            "Epoch 64/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1060 - mse: 0.1060 - val_loss: 0.0908 - val_mse: 0.0908\n",
            "Epoch 65/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1053 - mse: 0.1053 - val_loss: 0.0867 - val_mse: 0.0867\n",
            "Epoch 66/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1047 - mse: 0.1047 - val_loss: 0.0895 - val_mse: 0.0895\n",
            "Epoch 67/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.1042 - mse: 0.1042 - val_loss: 0.0831 - val_mse: 0.0831\n",
            "Epoch 68/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.1037 - mse: 0.1037 - val_loss: 0.0902 - val_mse: 0.0902\n",
            "Epoch 69/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.1032 - mse: 0.1032 - val_loss: 0.0801 - val_mse: 0.0801\n",
            "Epoch 70/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.1029 - mse: 0.1029 - val_loss: 0.0927 - val_mse: 0.0927\n",
            "Epoch 71/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.1028 - mse: 0.1028 - val_loss: 0.0782 - val_mse: 0.0782\n",
            "Epoch 72/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.1025 - mse: 0.1025 - val_loss: 0.0925 - val_mse: 0.0925\n",
            "Epoch 73/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.1013 - mse: 0.1013 - val_loss: 0.0798 - val_mse: 0.0798\n",
            "Epoch 74/200\n",
            "1/1 [==============================] - 0s 20ms/step - loss: 0.0992 - mse: 0.0992 - val_loss: 0.0837 - val_mse: 0.0837\n",
            "Epoch 75/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0976 - mse: 0.0976 - val_loss: 0.0852 - val_mse: 0.0852\n",
            "Epoch 76/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0970 - mse: 0.0970 - val_loss: 0.0769 - val_mse: 0.0769\n",
            "Epoch 77/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0971 - mse: 0.0971 - val_loss: 0.0867 - val_mse: 0.0867\n",
            "Epoch 78/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0966 - mse: 0.0966 - val_loss: 0.0747 - val_mse: 0.0747\n",
            "Epoch 79/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0951 - mse: 0.0951 - val_loss: 0.0796 - val_mse: 0.0796\n",
            "Epoch 80/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0935 - mse: 0.0935 - val_loss: 0.0764 - val_mse: 0.0764\n",
            "Epoch 81/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0924 - mse: 0.0924 - val_loss: 0.0722 - val_mse: 0.0722\n",
            "Epoch 82/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0919 - mse: 0.0919 - val_loss: 0.0786 - val_mse: 0.0786\n",
            "Epoch 83/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0916 - mse: 0.0916 - val_loss: 0.0690 - val_mse: 0.0690\n",
            "Epoch 84/200\n",
            "1/1 [==============================] - 0s 14ms/step - loss: 0.0909 - mse: 0.0909 - val_loss: 0.0765 - val_mse: 0.0765\n",
            "Epoch 85/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0897 - mse: 0.0897 - val_loss: 0.0690 - val_mse: 0.0690\n",
            "Epoch 86/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0882 - mse: 0.0882 - val_loss: 0.0711 - val_mse: 0.0711\n",
            "Epoch 87/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0869 - mse: 0.0869 - val_loss: 0.0707 - val_mse: 0.0707\n",
            "Epoch 88/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0860 - mse: 0.0860 - val_loss: 0.0665 - val_mse: 0.0665\n",
            "Epoch 89/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0854 - mse: 0.0854 - val_loss: 0.0717 - val_mse: 0.0717\n",
            "Epoch 90/200\n",
            "1/1 [==============================] - 0s 14ms/step - loss: 0.0848 - mse: 0.0848 - val_loss: 0.0635 - val_mse: 0.0635\n",
            "Epoch 91/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0841 - mse: 0.0841 - val_loss: 0.0703 - val_mse: 0.0703\n",
            "Epoch 92/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0832 - mse: 0.0832 - val_loss: 0.0617 - val_mse: 0.0617\n",
            "Epoch 93/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0821 - mse: 0.0821 - val_loss: 0.0671 - val_mse: 0.0671\n",
            "Epoch 94/200\n",
            "1/1 [==============================] - 0s 20ms/step - loss: 0.0809 - mse: 0.0809 - val_loss: 0.0605 - val_mse: 0.0605\n",
            "Epoch 95/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0797 - mse: 0.0797 - val_loss: 0.0634 - val_mse: 0.0634\n",
            "Epoch 96/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0785 - mse: 0.0785 - val_loss: 0.0597 - val_mse: 0.0597\n",
            "Epoch 97/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0774 - mse: 0.0774 - val_loss: 0.0603 - val_mse: 0.0603\n",
            "Epoch 98/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0763 - mse: 0.0763 - val_loss: 0.0590 - val_mse: 0.0590\n",
            "Epoch 99/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0753 - mse: 0.0753 - val_loss: 0.0581 - val_mse: 0.0581\n",
            "Epoch 100/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0743 - mse: 0.0743 - val_loss: 0.0582 - val_mse: 0.0582\n",
            "Epoch 101/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0734 - mse: 0.0734 - val_loss: 0.0559 - val_mse: 0.0559\n",
            "Epoch 102/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0724 - mse: 0.0724 - val_loss: 0.0581 - val_mse: 0.0581\n",
            "Epoch 103/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0717 - mse: 0.0717 - val_loss: 0.0529 - val_mse: 0.0529\n",
            "Epoch 104/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0714 - mse: 0.0714 - val_loss: 0.0617 - val_mse: 0.0617\n",
            "Epoch 105/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0725 - mse: 0.0725 - val_loss: 0.0509 - val_mse: 0.0509\n",
            "Epoch 106/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0770 - mse: 0.0770 - val_loss: 0.0776 - val_mse: 0.0776\n",
            "Epoch 107/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0852 - mse: 0.0852 - val_loss: 0.0520 - val_mse: 0.0520\n",
            "Epoch 108/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0836 - mse: 0.0836 - val_loss: 0.0601 - val_mse: 0.0601\n",
            "Epoch 109/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0693 - mse: 0.0693 - val_loss: 0.0583 - val_mse: 0.0583\n",
            "Epoch 110/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0678 - mse: 0.0678 - val_loss: 0.0497 - val_mse: 0.0497\n",
            "Epoch 111/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0764 - mse: 0.0764 - val_loss: 0.0623 - val_mse: 0.0623\n",
            "Epoch 112/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0698 - mse: 0.0698 - val_loss: 0.0529 - val_mse: 0.0529\n",
            "Epoch 113/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0639 - mse: 0.0639 - val_loss: 0.0477 - val_mse: 0.0477\n",
            "Epoch 114/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0708 - mse: 0.0708 - val_loss: 0.0588 - val_mse: 0.0588\n",
            "Epoch 115/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0668 - mse: 0.0668 - val_loss: 0.0509 - val_mse: 0.0509\n",
            "Epoch 116/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0618 - mse: 0.0618 - val_loss: 0.0461 - val_mse: 0.0461\n",
            "Epoch 117/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0671 - mse: 0.0671 - val_loss: 0.0551 - val_mse: 0.0551\n",
            "Epoch 118/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0634 - mse: 0.0634 - val_loss: 0.0498 - val_mse: 0.0498\n",
            "Epoch 119/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0601 - mse: 0.0601 - val_loss: 0.0450 - val_mse: 0.0450\n",
            "Epoch 120/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0640 - mse: 0.0640 - val_loss: 0.0522 - val_mse: 0.0522\n",
            "Epoch 121/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0605 - mse: 0.0605 - val_loss: 0.0491 - val_mse: 0.0491\n",
            "Epoch 122/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0585 - mse: 0.0585 - val_loss: 0.0441 - val_mse: 0.0441\n",
            "Epoch 123/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0612 - mse: 0.0612 - val_loss: 0.0497 - val_mse: 0.0497\n",
            "Epoch 124/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.0580 - mse: 0.0580 - val_loss: 0.0480 - val_mse: 0.0480\n",
            "Epoch 125/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0568 - mse: 0.0568 - val_loss: 0.0432 - val_mse: 0.0432\n",
            "Epoch 126/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.0586 - mse: 0.0586 - val_loss: 0.0478 - val_mse: 0.0478\n",
            "Epoch 127/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0560 - mse: 0.0560 - val_loss: 0.0466 - val_mse: 0.0466\n",
            "Epoch 128/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0550 - mse: 0.0550 - val_loss: 0.0425 - val_mse: 0.0425\n",
            "Epoch 129/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0563 - mse: 0.0563 - val_loss: 0.0469 - val_mse: 0.0469\n",
            "Epoch 130/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0543 - mse: 0.0543 - val_loss: 0.0452 - val_mse: 0.0452\n",
            "Epoch 131/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0532 - mse: 0.0532 - val_loss: 0.0422 - val_mse: 0.0422\n",
            "Epoch 132/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0541 - mse: 0.0541 - val_loss: 0.0463 - val_mse: 0.0463\n",
            "Epoch 133/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0527 - mse: 0.0527 - val_loss: 0.0440 - val_mse: 0.0440\n",
            "Epoch 134/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0515 - mse: 0.0515 - val_loss: 0.0419 - val_mse: 0.0419\n",
            "Epoch 135/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0520 - mse: 0.0520 - val_loss: 0.0457 - val_mse: 0.0457\n",
            "Epoch 136/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.0512 - mse: 0.0512 - val_loss: 0.0426 - val_mse: 0.0426\n",
            "Epoch 137/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0500 - mse: 0.0500 - val_loss: 0.0417 - val_mse: 0.0417\n",
            "Epoch 138/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0500 - mse: 0.0500 - val_loss: 0.0448 - val_mse: 0.0448\n",
            "Epoch 139/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0498 - mse: 0.0498 - val_loss: 0.0411 - val_mse: 0.0411\n",
            "Epoch 140/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0487 - mse: 0.0487 - val_loss: 0.0416 - val_mse: 0.0416\n",
            "Epoch 141/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0482 - mse: 0.0482 - val_loss: 0.0433 - val_mse: 0.0433\n",
            "Epoch 142/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0481 - mse: 0.0481 - val_loss: 0.0402 - val_mse: 0.0402\n",
            "Epoch 143/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0475 - mse: 0.0475 - val_loss: 0.0418 - val_mse: 0.0418\n",
            "Epoch 144/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0467 - mse: 0.0467 - val_loss: 0.0415 - val_mse: 0.0415\n",
            "Epoch 145/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0464 - mse: 0.0464 - val_loss: 0.0395 - val_mse: 0.0395\n",
            "Epoch 146/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0462 - mse: 0.0462 - val_loss: 0.0417 - val_mse: 0.0417\n",
            "Epoch 147/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0457 - mse: 0.0457 - val_loss: 0.0395 - val_mse: 0.0395\n",
            "Epoch 148/200\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.0450 - mse: 0.0450 - val_loss: 0.0397 - val_mse: 0.0397\n",
            "Epoch 149/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0446 - mse: 0.0446 - val_loss: 0.0407 - val_mse: 0.0407\n",
            "Epoch 150/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0443 - mse: 0.0443 - val_loss: 0.0384 - val_mse: 0.0384\n",
            "Epoch 151/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0441 - mse: 0.0441 - val_loss: 0.0402 - val_mse: 0.0402\n",
            "Epoch 152/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0435 - mse: 0.0435 - val_loss: 0.0387 - val_mse: 0.0387\n",
            "Epoch 153/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0429 - mse: 0.0429 - val_loss: 0.0383 - val_mse: 0.0383\n",
            "Epoch 154/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0426 - mse: 0.0426 - val_loss: 0.0395 - val_mse: 0.0395\n",
            "Epoch 155/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0424 - mse: 0.0424 - val_loss: 0.0377 - val_mse: 0.0377\n",
            "Epoch 156/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0421 - mse: 0.0421 - val_loss: 0.0390 - val_mse: 0.0390\n",
            "Epoch 157/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0417 - mse: 0.0417 - val_loss: 0.0380 - val_mse: 0.0380\n",
            "Epoch 158/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.0413 - mse: 0.0413 - val_loss: 0.0381 - val_mse: 0.0381\n",
            "Epoch 159/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0409 - mse: 0.0409 - val_loss: 0.0378 - val_mse: 0.0378\n",
            "Epoch 160/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0405 - mse: 0.0405 - val_loss: 0.0374 - val_mse: 0.0374\n",
            "Epoch 161/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0403 - mse: 0.0403 - val_loss: 0.0378 - val_mse: 0.0378\n",
            "Epoch 162/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.0400 - mse: 0.0400 - val_loss: 0.0368 - val_mse: 0.0368\n",
            "Epoch 163/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0398 - mse: 0.0398 - val_loss: 0.0381 - val_mse: 0.0381\n",
            "Epoch 164/200\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.0396 - mse: 0.0396 - val_loss: 0.0365 - val_mse: 0.0365\n",
            "Epoch 165/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0393 - mse: 0.0393 - val_loss: 0.0383 - val_mse: 0.0383\n",
            "Epoch 166/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0391 - mse: 0.0391 - val_loss: 0.0365 - val_mse: 0.0365\n",
            "Epoch 167/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0390 - mse: 0.0390 - val_loss: 0.0383 - val_mse: 0.0383\n",
            "Epoch 168/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0389 - mse: 0.0389 - val_loss: 0.0363 - val_mse: 0.0363\n",
            "Epoch 169/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0388 - mse: 0.0388 - val_loss: 0.0388 - val_mse: 0.0388\n",
            "Epoch 170/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0389 - mse: 0.0389 - val_loss: 0.0360 - val_mse: 0.0360\n",
            "Epoch 171/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0392 - mse: 0.0392 - val_loss: 0.0403 - val_mse: 0.0403\n",
            "Epoch 172/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0398 - mse: 0.0398 - val_loss: 0.0364 - val_mse: 0.0364\n",
            "Epoch 173/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0408 - mse: 0.0408 - val_loss: 0.0430 - val_mse: 0.0430\n",
            "Epoch 174/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0421 - mse: 0.0421 - val_loss: 0.0376 - val_mse: 0.0376\n",
            "Epoch 175/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0434 - mse: 0.0434 - val_loss: 0.0447 - val_mse: 0.0447\n",
            "Epoch 176/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0438 - mse: 0.0438 - val_loss: 0.0372 - val_mse: 0.0372\n",
            "Epoch 177/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0420 - mse: 0.0420 - val_loss: 0.0403 - val_mse: 0.0403\n",
            "Epoch 178/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0389 - mse: 0.0389 - val_loss: 0.0358 - val_mse: 0.0358\n",
            "Epoch 179/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.0365 - mse: 0.0365 - val_loss: 0.0360 - val_mse: 0.0360\n",
            "Epoch 180/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.0363 - mse: 0.0363 - val_loss: 0.0390 - val_mse: 0.0390\n",
            "Epoch 181/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0376 - mse: 0.0376 - val_loss: 0.0362 - val_mse: 0.0362\n",
            "Epoch 182/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0391 - mse: 0.0391 - val_loss: 0.0412 - val_mse: 0.0412\n",
            "Epoch 183/200\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.0392 - mse: 0.0392 - val_loss: 0.0358 - val_mse: 0.0358\n",
            "Epoch 184/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0379 - mse: 0.0379 - val_loss: 0.0380 - val_mse: 0.0380\n",
            "Epoch 185/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0361 - mse: 0.0361 - val_loss: 0.0362 - val_mse: 0.0362\n",
            "Epoch 186/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0352 - mse: 0.0352 - val_loss: 0.0357 - val_mse: 0.0357\n",
            "Epoch 187/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0356 - mse: 0.0356 - val_loss: 0.0389 - val_mse: 0.0389\n",
            "Epoch 188/200\n",
            "1/1 [==============================] - 0s 18ms/step - loss: 0.0365 - mse: 0.0365 - val_loss: 0.0357 - val_mse: 0.0357\n",
            "Epoch 189/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0371 - mse: 0.0371 - val_loss: 0.0394 - val_mse: 0.0394\n",
            "Epoch 190/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0369 - mse: 0.0369 - val_loss: 0.0354 - val_mse: 0.0354\n",
            "Epoch 191/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0359 - mse: 0.0359 - val_loss: 0.0369 - val_mse: 0.0369\n",
            "Epoch 192/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0349 - mse: 0.0349 - val_loss: 0.0361 - val_mse: 0.0361\n",
            "Epoch 193/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0345 - mse: 0.0345 - val_loss: 0.0355 - val_mse: 0.0355\n",
            "Epoch 194/200\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 0.0346 - mse: 0.0346 - val_loss: 0.0378 - val_mse: 0.0378\n",
            "Epoch 195/200\n",
            "1/1 [==============================] - 0s 19ms/step - loss: 0.0351 - mse: 0.0351 - val_loss: 0.0356 - val_mse: 0.0356\n",
            "Epoch 196/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0355 - mse: 0.0355 - val_loss: 0.0385 - val_mse: 0.0385\n",
            "Epoch 197/200\n",
            "1/1 [==============================] - 0s 17ms/step - loss: 0.0356 - mse: 0.0356 - val_loss: 0.0356 - val_mse: 0.0356\n",
            "Epoch 198/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0353 - mse: 0.0353 - val_loss: 0.0376 - val_mse: 0.0376\n",
            "Epoch 199/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0348 - mse: 0.0348 - val_loss: 0.0355 - val_mse: 0.0355\n",
            "Epoch 200/200\n",
            "1/1 [==============================] - 0s 16ms/step - loss: 0.0343 - mse: 0.0343 - val_loss: 0.0364 - val_mse: 0.0364\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0l8g2s4Ogwt7"
      },
      "source": [
        "Plot loss"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_FwytYay-fVf"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ksInevx1gt33",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "0276253d-5706-4d18-b141-4235e93967cc"
      },
      "source": [
        "def plot_loss(history):\n",
        "  plt.plot(history.history['loss'], label='loss')\n",
        "  plt.plot(history.history['val_loss'], label='val_loss')\n",
        "  plt.ylim([0, 0.2])\n",
        "  plt.xlabel('Epoch')\n",
        "  plt.ylabel('Error ')\n",
        "  plt.legend()\n",
        "  plt.grid(True)\n",
        "\n",
        "plot_loss(history)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UhWj-M9sWa1A"
      },
      "source": [
        "Evaluate neural network"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wAGobBA6XfTt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cb1ea7bf-1b61-49a2-8bf8-4c82ec37f99f"
      },
      "source": [
        "results = model0.evaluate(XX_test_n, yy_test_n)\n",
        "\n",
        "print('loss test data: ', results[0])\n",
        "print('mse test data: ', results[1])\n",
        "\n",
        "results = model0.evaluate(XX_train_n, yy_train_n)\n",
        "\n",
        "print('loss train data: ', results[0])\n",
        "print('mse train data: ', results[1])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "4/4 [==============================] - 0s 2ms/step - loss: 0.0364 - mse: 0.0364\n",
            "loss test data:  0.03637595474720001\n",
            "mse test data:  0.03637595474720001\n",
            "4/4 [==============================] - 0s 2ms/step - loss: 0.0339 - mse: 0.0339\n",
            "loss train data:  0.03389384597539902\n",
            "mse train data:  0.03389384597539902\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8qv-t09rWgT8"
      },
      "source": [
        "Plot results"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JwHkHPnzvD_z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "outputId": "07592204-7294-44b2-be8f-b1042f96b5e7"
      },
      "source": [
        "fig = plt.figure(figsize=(7,7))\n",
        "\n",
        "plt.plot(XX_train_n,yy_train_n, 'o', color='blue', label='Training points')\n",
        "plt.plot(XX_test_n,yy_test_n, 'o', color='green', label='Testing points')\n",
        "\n",
        "points = np.linspace(min(XX_test_n), max(XX_test_n),num=100)\n",
        "plt.plot(points, (funct(points*std+mean)-mean1)/std1,  color='red', label='Function')\n",
        "\n",
        "plt.plot(points, model0.predict(points),  color='orange', label='Neural net')\n",
        "\n",
        "\n",
        "plt.legend()\n",
        "\n",
        "\n",
        "plt.show"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 163
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 504x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xnwcHVfaHJif"
      },
      "source": [
        "**The Boston Housing Price dataset**\n",
        "\n",
        "We will be attempting to predict the median price of homes in a given Boston suburb in the mid-1970s, given a few data points about the suburb at the time, such as the crime rate, the local property tax rate, etc.\n",
        "\n",
        "The dataset has very few data points, only 506 in total, split between 404 training samples and 102 test samples, and each \"feature\" in the input data (e.g. the crime rate is a feature) has a different scale. For instance some values are proportions, which take a values between 0 and 1, others take values between 1 and 12, others between 0 and 100..."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "__lqdBmD9cgL"
      },
      "source": [
        "from keras.datasets import boston_housing\n",
        "\n",
        "(XX_train_n, yy_train_n), (XX_test_n, yy_test_n) = boston_housing.load_data()\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZDCcGuFW9RP6"
      },
      "source": [
        "\n",
        "**Preparing the data**\n",
        "\n",
        "It would be problematic to feed into a neural network values that all take wildly different ranges. The network might be able to automatically adapt to such heterogeneous data, but it would definitely make learning more difficult. A widespread best practice to deal with such data is to do feature-wise normalization: for each feature in the input data (a column in the input data matrix), we will subtract the mean of the feature and divide by the standard deviation, so that the feature will be centered around 0 and will have a unit standard deviation. This is easily done in Numpy:\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NRPumcs09RP7"
      },
      "source": [
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "78oNgkuWE6vb"
      },
      "source": [
        "Define, compile and train neural network"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uuj5f4Mg6e5y"
      },
      "source": [
        "\n",
        "model = Sequential()\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "86NDw6Qm91dC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "2d71e99e-27d2-4f4e-b74b-1626008faf96"
      },
      "source": [
        "def plot_loss(history):\n",
        "  plt.plot(history.history['loss'], label='loss')\n",
        "  plt.plot(history.history['val_loss'], label='val_loss')\n",
        "  plt.ylim([0, 0.5])\n",
        "  plt.xlabel('Epoch')\n",
        "  plt.ylabel('Error [MPG]')\n",
        "  plt.legend()\n",
        "  plt.grid(True)\n",
        "\n",
        "plot_loss(history)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E2enpb6gFGte"
      },
      "source": [
        "Evaluate neural network"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1dewsTB7XbAh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 231
        },
        "outputId": "09e3eafd-212f-4f23-ac0c-b72869a6b601"
      },
      "source": [
        "results = model.evaluate(XX_test_n, yy_test_n)\n",
        "\n",
        "print('loss test data: ', results[0])\n",
        "print('mse test data: ', results[1])\n",
        "\n",
        "results = model.evaluate(XX_train_n, yy_train_n)\n",
        "\n",
        "print('loss train data: ', results[0])\n",
        "print('mse train data: ', results[1])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-167-7009351e1c23>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_n\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test_n\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'loss test data: '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'mse test data: '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'X_test_n' is not defined"
          ]
        }
      ]
    }
  ]
}