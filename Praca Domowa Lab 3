{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Kopia notatnika cwiczenia_3a_regresja.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MichalSien/Michal-Lab/blob/main/Praca%20Domowa%20Lab%203\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RQH7zbVF8v6g"
      },
      "source": [
        "\n",
        "\n",
        "# **A regression example**\n",
        "\n",
        "Common type of machine learning problem is \"regression\", which consists of predicting a continuous value instead of a discrete label. For instance, predicting the temperature tomorrow, given meteorological data, or predicting the time that a software project will take to complete, given its specifications.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6Zl5s4feH_v4"
      },
      "source": [
        "\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Activation, Dense, Dropout\n",
        "from keras import optimizers\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qvsAzyjTI3Ie"
      },
      "source": [
        "**1-dimensional data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4fEyq6reI8Vi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "120999f2-6ba9-4ab3-e73b-026716744e18"
      },
      "source": [
        "def funct(x):\n",
        "  return x*x*np.sin(x)+np.log(2*x)\n",
        "\n",
        "size = 200\n",
        "low=0\n",
        "high=12\n",
        "error=30\n",
        "\n",
        "XX_train = np.random.uniform(low=low, high=high, size=size)\n",
        "XX_test = np.random.uniform(low=low, high=high, size=size)\n",
        "yy_train = funct(XX_train) + np.random.normal(0., error, size)\n",
        "yy_test = funct(XX_test) + np.random.normal(0., error, size)\n",
        "\n",
        "print(XX_train.shape, yy_train.shape)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(200,) (200,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UK9f3EkaNLKy"
      },
      "source": [
        "Plot the function and data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jc4wlpu6NPib",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 479
        },
        "outputId": "5853cd72-b3b8-4fac-b79a-d8381345a21a"
      },
      "source": [
        "fig = plt.figure(figsize=(7,7))\n",
        "\n",
        "plt.plot(XX_train,yy_train, 'o', color='blue', label='Training points')\n",
        "plt.plot(XX_test,yy_test, 'o', color='green', label='Testing points')\n",
        "\n",
        "points = np.linspace(low, high,num=100)\n",
        "plt.plot(points, funct(points),  color='red', label='Function')\n",
        "plt.legend()\n",
        "\n",
        "\n",
        "plt.show"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: RuntimeWarning: divide by zero encountered in log\n",
            "  \n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 504x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CS7hU2fiZHzl"
      },
      "source": [
        "\n",
        "**Preparing the data**\n",
        "\n",
        "It would be problematic to feed into a neural network values that all take wildly different ranges. The network might be able to automatically adapt to such heterogeneous data, but it would definitely make learning more difficult. A widespread best practice to deal with such data is to do feature-wise normalization: for each feature in the input data (a column in the input data matrix), we will subtract the mean of the feature and divide by the standard deviation, so that the feature will be centered around 0 and will have a unit standard deviation. This is easily done in Numpy:\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cNzLzYMFZNab"
      },
      "source": [
        "# Tutaj należy znormalizować dane, i.e. \n",
        "# - odjąć średnią\n",
        "# - podzielić przez odchylenie standardowe\n",
        "\n",
        "mean = XX_train.mean(axis=0)\n",
        "XX_train_n = XX_train-mean\n",
        "std = XX_train_n.std(axis=0)\n",
        "XX_train_n /= std\n",
        "\n",
        "# to samo dla X_test\n",
        "XX_test_n = XX_test - mean\n",
        "XX_test_n /= std\n",
        "\n",
        "\n",
        "# A teraz to samo dla yy_train i yy_test\n",
        "\n",
        "mean1 = yy_train.mean(axis=0)\n",
        "yy_train_n = yy_train-mean1\n",
        "std1 = yy_train_n.std(axis=0)\n",
        "yy_train_n /= std1\n",
        "\n",
        "yy_test_n = yy_test - mean1\n",
        "yy_test_n /= std1\n"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G1akSHhNWUOI"
      },
      "source": [
        "Define neural network"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zKnzCxTvWlLF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b93a1f62-1338-480f-f9a4-0aefeb8e6767"
      },
      "source": [
        "# Zbudować sieć neuronową, działa: dwie warstwy ukryte, aktywacja relu\n",
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "\n",
        "model0 = Sequential(name='network')\n",
        "model0.add(layers.Dense(2048, activation='relu', input_shape=(1,)))\n",
        "model0.add(layers.Dropout(0.2))\n",
        "model0.add(layers.Dense(2048, activation='relu'))\n",
        "model0.add(layers.Dropout(0.2))\n",
        "model0.add(layers.Dense(1, activation='linear'))\n",
        "\n",
        "model0.compile(optimizer='adam',\n",
        "                  loss='mean_squared_error',\n",
        "                  metrics=['mse'])\n",
        "\n",
        "model0.summary()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"network\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense_6 (Dense)              (None, 2048)              4096      \n",
            "_________________________________________________________________\n",
            "dropout_4 (Dropout)          (None, 2048)              0         \n",
            "_________________________________________________________________\n",
            "dense_7 (Dense)              (None, 2048)              4196352   \n",
            "_________________________________________________________________\n",
            "dropout_5 (Dropout)          (None, 2048)              0         \n",
            "_________________________________________________________________\n",
            "dense_8 (Dense)              (None, 1)                 2049      \n",
            "=================================================================\n",
            "Total params: 4,202,497\n",
            "Trainable params: 4,202,497\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N6CIlc58-R1k"
      },
      "source": [
        ""
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u9pQ61rwWX9F"
      },
      "source": [
        "Train neural network\n",
        "\n",
        "For regression problems, mean squared error (MSE) is often employed\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hos2Vg10XBU3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "91c598e7-a798-42b4-fd41-a930217669a0"
      },
      "source": [
        "# compile and train NN\n",
        "# Uwaga: dla regresji używamy: loss = 'mean_squared_error'   oraz metrics = ['mse']\n",
        "\n",
        "history = model0.fit(XX_train_n, yy_train_n,\n",
        "                                  epochs=200,\n",
        "                                  batch_size=512,\n",
        "                                  validation_data=(XX_test_n, yy_test_n))\n"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/200\n",
            "1/1 [==============================] - 0s 130ms/step - loss: 0.9800 - mse: 0.9800 - val_loss: 0.7492 - val_mse: 0.7492\n",
            "Epoch 2/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.9246 - mse: 0.9246 - val_loss: 0.8111 - val_mse: 0.8111\n",
            "Epoch 3/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.9294 - mse: 0.9294 - val_loss: 0.7656 - val_mse: 0.7656\n",
            "Epoch 4/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.8656 - mse: 0.8656 - val_loss: 0.8008 - val_mse: 0.8008\n",
            "Epoch 5/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.8786 - mse: 0.8786 - val_loss: 0.7741 - val_mse: 0.7741\n",
            "Epoch 6/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.8462 - mse: 0.8462 - val_loss: 0.7516 - val_mse: 0.7516\n",
            "Epoch 7/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.8209 - mse: 0.8209 - val_loss: 0.7178 - val_mse: 0.7178\n",
            "Epoch 8/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.7978 - mse: 0.7978 - val_loss: 0.6670 - val_mse: 0.6670\n",
            "Epoch 9/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.7660 - mse: 0.7660 - val_loss: 0.6229 - val_mse: 0.6229\n",
            "Epoch 10/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.7390 - mse: 0.7390 - val_loss: 0.5961 - val_mse: 0.5961\n",
            "Epoch 11/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.7092 - mse: 0.7092 - val_loss: 0.5797 - val_mse: 0.5797\n",
            "Epoch 12/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.6751 - mse: 0.6751 - val_loss: 0.5645 - val_mse: 0.5645\n",
            "Epoch 13/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.6454 - mse: 0.6454 - val_loss: 0.5457 - val_mse: 0.5457\n",
            "Epoch 14/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.6182 - mse: 0.6182 - val_loss: 0.5180 - val_mse: 0.5180\n",
            "Epoch 15/200\n",
            "1/1 [==============================] - 0s 24ms/step - loss: 0.5723 - mse: 0.5723 - val_loss: 0.4835 - val_mse: 0.4835\n",
            "Epoch 16/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.5429 - mse: 0.5429 - val_loss: 0.4463 - val_mse: 0.4463\n",
            "Epoch 17/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.5150 - mse: 0.5150 - val_loss: 0.4134 - val_mse: 0.4134\n",
            "Epoch 18/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.4837 - mse: 0.4837 - val_loss: 0.3889 - val_mse: 0.3889\n",
            "Epoch 19/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.4585 - mse: 0.4585 - val_loss: 0.3762 - val_mse: 0.3762\n",
            "Epoch 20/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.4364 - mse: 0.4364 - val_loss: 0.3655 - val_mse: 0.3655\n",
            "Epoch 21/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.4135 - mse: 0.4135 - val_loss: 0.3459 - val_mse: 0.3459\n",
            "Epoch 22/200\n",
            "1/1 [==============================] - 0s 34ms/step - loss: 0.3996 - mse: 0.3996 - val_loss: 0.3293 - val_mse: 0.3293\n",
            "Epoch 23/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3905 - mse: 0.3905 - val_loss: 0.3247 - val_mse: 0.3247\n",
            "Epoch 24/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.4027 - mse: 0.4027 - val_loss: 0.3412 - val_mse: 0.3412\n",
            "Epoch 25/200\n",
            "1/1 [==============================] - 0s 24ms/step - loss: 0.3991 - mse: 0.3991 - val_loss: 0.3556 - val_mse: 0.3556\n",
            "Epoch 26/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.4085 - mse: 0.4085 - val_loss: 0.3290 - val_mse: 0.3290\n",
            "Epoch 27/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.4077 - mse: 0.4077 - val_loss: 0.3131 - val_mse: 0.3131\n",
            "Epoch 28/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3980 - mse: 0.3980 - val_loss: 0.3042 - val_mse: 0.3042\n",
            "Epoch 29/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.3925 - mse: 0.3925 - val_loss: 0.3103 - val_mse: 0.3103\n",
            "Epoch 30/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3727 - mse: 0.3727 - val_loss: 0.2973 - val_mse: 0.2973\n",
            "Epoch 31/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3925 - mse: 0.3925 - val_loss: 0.2803 - val_mse: 0.2803\n",
            "Epoch 32/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3863 - mse: 0.3863 - val_loss: 0.2824 - val_mse: 0.2824\n",
            "Epoch 33/200\n",
            "1/1 [==============================] - 0s 33ms/step - loss: 0.3760 - mse: 0.3760 - val_loss: 0.3080 - val_mse: 0.3080\n",
            "Epoch 34/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.3626 - mse: 0.3626 - val_loss: 0.3186 - val_mse: 0.3186\n",
            "Epoch 35/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3883 - mse: 0.3883 - val_loss: 0.2944 - val_mse: 0.2944\n",
            "Epoch 36/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.3727 - mse: 0.3727 - val_loss: 0.2810 - val_mse: 0.2810\n",
            "Epoch 37/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3752 - mse: 0.3752 - val_loss: 0.2814 - val_mse: 0.2814\n",
            "Epoch 38/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3723 - mse: 0.3723 - val_loss: 0.2977 - val_mse: 0.2977\n",
            "Epoch 39/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.3646 - mse: 0.3646 - val_loss: 0.2950 - val_mse: 0.2950\n",
            "Epoch 40/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3610 - mse: 0.3610 - val_loss: 0.2760 - val_mse: 0.2760\n",
            "Epoch 41/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3853 - mse: 0.3853 - val_loss: 0.2751 - val_mse: 0.2751\n",
            "Epoch 42/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3697 - mse: 0.3697 - val_loss: 0.2834 - val_mse: 0.2834\n",
            "Epoch 43/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3563 - mse: 0.3563 - val_loss: 0.2960 - val_mse: 0.2960\n",
            "Epoch 44/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3719 - mse: 0.3719 - val_loss: 0.2860 - val_mse: 0.2860\n",
            "Epoch 45/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3692 - mse: 0.3692 - val_loss: 0.2720 - val_mse: 0.2720\n",
            "Epoch 46/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3770 - mse: 0.3770 - val_loss: 0.2702 - val_mse: 0.2702\n",
            "Epoch 47/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.3793 - mse: 0.3793 - val_loss: 0.2780 - val_mse: 0.2780\n",
            "Epoch 48/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3584 - mse: 0.3584 - val_loss: 0.2869 - val_mse: 0.2869\n",
            "Epoch 49/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3641 - mse: 0.3641 - val_loss: 0.2811 - val_mse: 0.2811\n",
            "Epoch 50/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3384 - mse: 0.3384 - val_loss: 0.2777 - val_mse: 0.2777\n",
            "Epoch 51/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3660 - mse: 0.3660 - val_loss: 0.2854 - val_mse: 0.2854\n",
            "Epoch 52/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3653 - mse: 0.3653 - val_loss: 0.2863 - val_mse: 0.2863\n",
            "Epoch 53/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3530 - mse: 0.3530 - val_loss: 0.2785 - val_mse: 0.2785\n",
            "Epoch 54/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3950 - mse: 0.3950 - val_loss: 0.2765 - val_mse: 0.2765\n",
            "Epoch 55/200\n",
            "1/1 [==============================] - 0s 38ms/step - loss: 0.3500 - mse: 0.3500 - val_loss: 0.2785 - val_mse: 0.2785\n",
            "Epoch 56/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3703 - mse: 0.3703 - val_loss: 0.2842 - val_mse: 0.2842\n",
            "Epoch 57/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3612 - mse: 0.3612 - val_loss: 0.2841 - val_mse: 0.2841\n",
            "Epoch 58/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3656 - mse: 0.3656 - val_loss: 0.2817 - val_mse: 0.2817\n",
            "Epoch 59/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3676 - mse: 0.3676 - val_loss: 0.2808 - val_mse: 0.2808\n",
            "Epoch 60/200\n",
            "1/1 [==============================] - 0s 24ms/step - loss: 0.3484 - mse: 0.3484 - val_loss: 0.2803 - val_mse: 0.2803\n",
            "Epoch 61/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3585 - mse: 0.3585 - val_loss: 0.2826 - val_mse: 0.2826\n",
            "Epoch 62/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.3597 - mse: 0.3597 - val_loss: 0.2736 - val_mse: 0.2736\n",
            "Epoch 63/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3610 - mse: 0.3610 - val_loss: 0.2711 - val_mse: 0.2711\n",
            "Epoch 64/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3496 - mse: 0.3496 - val_loss: 0.2764 - val_mse: 0.2764\n",
            "Epoch 65/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.3597 - mse: 0.3597 - val_loss: 0.2875 - val_mse: 0.2875\n",
            "Epoch 66/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3536 - mse: 0.3536 - val_loss: 0.2848 - val_mse: 0.2848\n",
            "Epoch 67/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3426 - mse: 0.3426 - val_loss: 0.2717 - val_mse: 0.2717\n",
            "Epoch 68/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3575 - mse: 0.3575 - val_loss: 0.2721 - val_mse: 0.2721\n",
            "Epoch 69/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3565 - mse: 0.3565 - val_loss: 0.2871 - val_mse: 0.2871\n",
            "Epoch 70/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3590 - mse: 0.3590 - val_loss: 0.2864 - val_mse: 0.2864\n",
            "Epoch 71/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.3594 - mse: 0.3594 - val_loss: 0.2732 - val_mse: 0.2732\n",
            "Epoch 72/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3573 - mse: 0.3573 - val_loss: 0.2719 - val_mse: 0.2719\n",
            "Epoch 73/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3705 - mse: 0.3705 - val_loss: 0.2822 - val_mse: 0.2822\n",
            "Epoch 74/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3527 - mse: 0.3527 - val_loss: 0.2791 - val_mse: 0.2791\n",
            "Epoch 75/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3464 - mse: 0.3464 - val_loss: 0.2710 - val_mse: 0.2710\n",
            "Epoch 76/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3634 - mse: 0.3634 - val_loss: 0.2736 - val_mse: 0.2736\n",
            "Epoch 77/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3543 - mse: 0.3543 - val_loss: 0.2771 - val_mse: 0.2771\n",
            "Epoch 78/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3613 - mse: 0.3613 - val_loss: 0.2766 - val_mse: 0.2766\n",
            "Epoch 79/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3429 - mse: 0.3429 - val_loss: 0.2729 - val_mse: 0.2729\n",
            "Epoch 80/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3555 - mse: 0.3555 - val_loss: 0.2717 - val_mse: 0.2717\n",
            "Epoch 81/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3522 - mse: 0.3522 - val_loss: 0.2716 - val_mse: 0.2716\n",
            "Epoch 82/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3456 - mse: 0.3456 - val_loss: 0.2755 - val_mse: 0.2755\n",
            "Epoch 83/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3405 - mse: 0.3405 - val_loss: 0.2814 - val_mse: 0.2814\n",
            "Epoch 84/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3415 - mse: 0.3415 - val_loss: 0.2715 - val_mse: 0.2715\n",
            "Epoch 85/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3382 - mse: 0.3382 - val_loss: 0.2690 - val_mse: 0.2690\n",
            "Epoch 86/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3421 - mse: 0.3421 - val_loss: 0.2771 - val_mse: 0.2771\n",
            "Epoch 87/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3464 - mse: 0.3464 - val_loss: 0.2786 - val_mse: 0.2786\n",
            "Epoch 88/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3416 - mse: 0.3416 - val_loss: 0.2724 - val_mse: 0.2724\n",
            "Epoch 89/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3536 - mse: 0.3536 - val_loss: 0.2701 - val_mse: 0.2701\n",
            "Epoch 90/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3438 - mse: 0.3438 - val_loss: 0.2739 - val_mse: 0.2739\n",
            "Epoch 91/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3237 - mse: 0.3237 - val_loss: 0.2727 - val_mse: 0.2727\n",
            "Epoch 92/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3440 - mse: 0.3440 - val_loss: 0.2697 - val_mse: 0.2697\n",
            "Epoch 93/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3306 - mse: 0.3306 - val_loss: 0.2683 - val_mse: 0.2683\n",
            "Epoch 94/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3430 - mse: 0.3430 - val_loss: 0.2766 - val_mse: 0.2766\n",
            "Epoch 95/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3389 - mse: 0.3389 - val_loss: 0.2719 - val_mse: 0.2719\n",
            "Epoch 96/200\n",
            "1/1 [==============================] - 0s 24ms/step - loss: 0.3375 - mse: 0.3375 - val_loss: 0.2684 - val_mse: 0.2684\n",
            "Epoch 97/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3376 - mse: 0.3376 - val_loss: 0.2706 - val_mse: 0.2706\n",
            "Epoch 98/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.3352 - mse: 0.3352 - val_loss: 0.2735 - val_mse: 0.2735\n",
            "Epoch 99/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.3327 - mse: 0.3327 - val_loss: 0.2700 - val_mse: 0.2700\n",
            "Epoch 100/200\n",
            "1/1 [==============================] - 0s 34ms/step - loss: 0.3511 - mse: 0.3511 - val_loss: 0.2696 - val_mse: 0.2696\n",
            "Epoch 101/200\n",
            "1/1 [==============================] - 0s 37ms/step - loss: 0.3324 - mse: 0.3324 - val_loss: 0.2721 - val_mse: 0.2721\n",
            "Epoch 102/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3224 - mse: 0.3224 - val_loss: 0.2713 - val_mse: 0.2713\n",
            "Epoch 103/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3454 - mse: 0.3454 - val_loss: 0.2685 - val_mse: 0.2685\n",
            "Epoch 104/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.3227 - mse: 0.3227 - val_loss: 0.2647 - val_mse: 0.2647\n",
            "Epoch 105/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3292 - mse: 0.3292 - val_loss: 0.2637 - val_mse: 0.2637\n",
            "Epoch 106/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3413 - mse: 0.3413 - val_loss: 0.2724 - val_mse: 0.2724\n",
            "Epoch 107/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.3295 - mse: 0.3295 - val_loss: 0.2702 - val_mse: 0.2702\n",
            "Epoch 108/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3390 - mse: 0.3390 - val_loss: 0.2691 - val_mse: 0.2691\n",
            "Epoch 109/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3307 - mse: 0.3307 - val_loss: 0.2710 - val_mse: 0.2710\n",
            "Epoch 110/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3223 - mse: 0.3223 - val_loss: 0.2702 - val_mse: 0.2702\n",
            "Epoch 111/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3199 - mse: 0.3199 - val_loss: 0.2722 - val_mse: 0.2722\n",
            "Epoch 112/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3122 - mse: 0.3122 - val_loss: 0.2675 - val_mse: 0.2675\n",
            "Epoch 113/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3095 - mse: 0.3095 - val_loss: 0.2608 - val_mse: 0.2608\n",
            "Epoch 114/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3245 - mse: 0.3245 - val_loss: 0.2659 - val_mse: 0.2659\n",
            "Epoch 115/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.3117 - mse: 0.3117 - val_loss: 0.2753 - val_mse: 0.2753\n",
            "Epoch 116/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3198 - mse: 0.3198 - val_loss: 0.2746 - val_mse: 0.2746\n",
            "Epoch 117/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3255 - mse: 0.3255 - val_loss: 0.2695 - val_mse: 0.2695\n",
            "Epoch 118/200\n",
            "1/1 [==============================] - 0s 33ms/step - loss: 0.3156 - mse: 0.3156 - val_loss: 0.2655 - val_mse: 0.2655\n",
            "Epoch 119/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.3159 - mse: 0.3159 - val_loss: 0.2696 - val_mse: 0.2696\n",
            "Epoch 120/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.3078 - mse: 0.3078 - val_loss: 0.2764 - val_mse: 0.2764\n",
            "Epoch 121/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.3145 - mse: 0.3145 - val_loss: 0.2681 - val_mse: 0.2681\n",
            "Epoch 122/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3108 - mse: 0.3108 - val_loss: 0.2666 - val_mse: 0.2666\n",
            "Epoch 123/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3052 - mse: 0.3052 - val_loss: 0.2693 - val_mse: 0.2693\n",
            "Epoch 124/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3059 - mse: 0.3059 - val_loss: 0.2713 - val_mse: 0.2713\n",
            "Epoch 125/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3167 - mse: 0.3167 - val_loss: 0.2726 - val_mse: 0.2726\n",
            "Epoch 126/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.3180 - mse: 0.3180 - val_loss: 0.2690 - val_mse: 0.2690\n",
            "Epoch 127/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2969 - mse: 0.2969 - val_loss: 0.2657 - val_mse: 0.2657\n",
            "Epoch 128/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.3229 - mse: 0.3229 - val_loss: 0.2747 - val_mse: 0.2747\n",
            "Epoch 129/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3108 - mse: 0.3108 - val_loss: 0.2773 - val_mse: 0.2773\n",
            "Epoch 130/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3229 - mse: 0.3229 - val_loss: 0.2694 - val_mse: 0.2694\n",
            "Epoch 131/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3031 - mse: 0.3031 - val_loss: 0.2629 - val_mse: 0.2629\n",
            "Epoch 132/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3039 - mse: 0.3039 - val_loss: 0.2666 - val_mse: 0.2666\n",
            "Epoch 133/200\n",
            "1/1 [==============================] - 0s 33ms/step - loss: 0.3117 - mse: 0.3117 - val_loss: 0.2780 - val_mse: 0.2780\n",
            "Epoch 134/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2939 - mse: 0.2939 - val_loss: 0.2771 - val_mse: 0.2771\n",
            "Epoch 135/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3105 - mse: 0.3105 - val_loss: 0.2680 - val_mse: 0.2680\n",
            "Epoch 136/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.3025 - mse: 0.3025 - val_loss: 0.2641 - val_mse: 0.2641\n",
            "Epoch 137/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.3089 - mse: 0.3089 - val_loss: 0.2655 - val_mse: 0.2655\n",
            "Epoch 138/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.3013 - mse: 0.3013 - val_loss: 0.2828 - val_mse: 0.2828\n",
            "Epoch 139/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3054 - mse: 0.3054 - val_loss: 0.2988 - val_mse: 0.2988\n",
            "Epoch 140/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2984 - mse: 0.2984 - val_loss: 0.2741 - val_mse: 0.2741\n",
            "Epoch 141/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2978 - mse: 0.2978 - val_loss: 0.2635 - val_mse: 0.2635\n",
            "Epoch 142/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2998 - mse: 0.2998 - val_loss: 0.2673 - val_mse: 0.2673\n",
            "Epoch 143/200\n",
            "1/1 [==============================] - 0s 32ms/step - loss: 0.3038 - mse: 0.3038 - val_loss: 0.2866 - val_mse: 0.2866\n",
            "Epoch 144/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.3164 - mse: 0.3164 - val_loss: 0.2836 - val_mse: 0.2836\n",
            "Epoch 145/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.3127 - mse: 0.3127 - val_loss: 0.2712 - val_mse: 0.2712\n",
            "Epoch 146/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.3094 - mse: 0.3094 - val_loss: 0.2709 - val_mse: 0.2709\n",
            "Epoch 147/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2913 - mse: 0.2913 - val_loss: 0.2694 - val_mse: 0.2694\n",
            "Epoch 148/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.3047 - mse: 0.3047 - val_loss: 0.2769 - val_mse: 0.2769\n",
            "Epoch 149/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.3086 - mse: 0.3086 - val_loss: 0.2788 - val_mse: 0.2788\n",
            "Epoch 150/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.3098 - mse: 0.3098 - val_loss: 0.2733 - val_mse: 0.2733\n",
            "Epoch 151/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2938 - mse: 0.2938 - val_loss: 0.2744 - val_mse: 0.2744\n",
            "Epoch 152/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2964 - mse: 0.2964 - val_loss: 0.2791 - val_mse: 0.2791\n",
            "Epoch 153/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2995 - mse: 0.2995 - val_loss: 0.2778 - val_mse: 0.2778\n",
            "Epoch 154/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2908 - mse: 0.2908 - val_loss: 0.2689 - val_mse: 0.2689\n",
            "Epoch 155/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2924 - mse: 0.2924 - val_loss: 0.2692 - val_mse: 0.2692\n",
            "Epoch 156/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2846 - mse: 0.2846 - val_loss: 0.2809 - val_mse: 0.2809\n",
            "Epoch 157/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2919 - mse: 0.2919 - val_loss: 0.2824 - val_mse: 0.2824\n",
            "Epoch 158/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2859 - mse: 0.2859 - val_loss: 0.2757 - val_mse: 0.2757\n",
            "Epoch 159/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2964 - mse: 0.2964 - val_loss: 0.2675 - val_mse: 0.2675\n",
            "Epoch 160/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2900 - mse: 0.2900 - val_loss: 0.2699 - val_mse: 0.2699\n",
            "Epoch 161/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2901 - mse: 0.2901 - val_loss: 0.2761 - val_mse: 0.2761\n",
            "Epoch 162/200\n",
            "1/1 [==============================] - 0s 33ms/step - loss: 0.2872 - mse: 0.2872 - val_loss: 0.2798 - val_mse: 0.2798\n",
            "Epoch 163/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2883 - mse: 0.2883 - val_loss: 0.2808 - val_mse: 0.2808\n",
            "Epoch 164/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2896 - mse: 0.2896 - val_loss: 0.2758 - val_mse: 0.2758\n",
            "Epoch 165/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2805 - mse: 0.2805 - val_loss: 0.2743 - val_mse: 0.2743\n",
            "Epoch 166/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2882 - mse: 0.2882 - val_loss: 0.2750 - val_mse: 0.2750\n",
            "Epoch 167/200\n",
            "1/1 [==============================] - 0s 35ms/step - loss: 0.2859 - mse: 0.2859 - val_loss: 0.2749 - val_mse: 0.2749\n",
            "Epoch 168/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.3003 - mse: 0.3003 - val_loss: 0.2768 - val_mse: 0.2768\n",
            "Epoch 169/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.3120 - mse: 0.3120 - val_loss: 0.2784 - val_mse: 0.2784\n",
            "Epoch 170/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2979 - mse: 0.2979 - val_loss: 0.2792 - val_mse: 0.2792\n",
            "Epoch 171/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2781 - mse: 0.2781 - val_loss: 0.2796 - val_mse: 0.2796\n",
            "Epoch 172/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2914 - mse: 0.2914 - val_loss: 0.2716 - val_mse: 0.2716\n",
            "Epoch 173/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2858 - mse: 0.2858 - val_loss: 0.2755 - val_mse: 0.2755\n",
            "Epoch 174/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2838 - mse: 0.2838 - val_loss: 0.2791 - val_mse: 0.2791\n",
            "Epoch 175/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2836 - mse: 0.2836 - val_loss: 0.2725 - val_mse: 0.2725\n",
            "Epoch 176/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2960 - mse: 0.2960 - val_loss: 0.2722 - val_mse: 0.2722\n",
            "Epoch 177/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2883 - mse: 0.2883 - val_loss: 0.2758 - val_mse: 0.2758\n",
            "Epoch 178/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2903 - mse: 0.2903 - val_loss: 0.2829 - val_mse: 0.2829\n",
            "Epoch 179/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2861 - mse: 0.2861 - val_loss: 0.2885 - val_mse: 0.2885\n",
            "Epoch 180/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2732 - mse: 0.2732 - val_loss: 0.2853 - val_mse: 0.2853\n",
            "Epoch 181/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2901 - mse: 0.2901 - val_loss: 0.2720 - val_mse: 0.2720\n",
            "Epoch 182/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2786 - mse: 0.2786 - val_loss: 0.2710 - val_mse: 0.2710\n",
            "Epoch 183/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2990 - mse: 0.2990 - val_loss: 0.2826 - val_mse: 0.2826\n",
            "Epoch 184/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2841 - mse: 0.2841 - val_loss: 0.2870 - val_mse: 0.2870\n",
            "Epoch 185/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2911 - mse: 0.2911 - val_loss: 0.2892 - val_mse: 0.2892\n",
            "Epoch 186/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2894 - mse: 0.2894 - val_loss: 0.2840 - val_mse: 0.2840\n",
            "Epoch 187/200\n",
            "1/1 [==============================] - 0s 35ms/step - loss: 0.3028 - mse: 0.3028 - val_loss: 0.2769 - val_mse: 0.2769\n",
            "Epoch 188/200\n",
            "1/1 [==============================] - 0s 34ms/step - loss: 0.2847 - mse: 0.2847 - val_loss: 0.2709 - val_mse: 0.2709\n",
            "Epoch 189/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2934 - mse: 0.2934 - val_loss: 0.2775 - val_mse: 0.2775\n",
            "Epoch 190/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2799 - mse: 0.2799 - val_loss: 0.2771 - val_mse: 0.2771\n",
            "Epoch 191/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2760 - mse: 0.2760 - val_loss: 0.2757 - val_mse: 0.2757\n",
            "Epoch 192/200\n",
            "1/1 [==============================] - 0s 38ms/step - loss: 0.2924 - mse: 0.2924 - val_loss: 0.2735 - val_mse: 0.2735\n",
            "Epoch 193/200\n",
            "1/1 [==============================] - 0s 34ms/step - loss: 0.2788 - mse: 0.2788 - val_loss: 0.2759 - val_mse: 0.2759\n",
            "Epoch 194/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2789 - mse: 0.2789 - val_loss: 0.2741 - val_mse: 0.2741\n",
            "Epoch 195/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2883 - mse: 0.2883 - val_loss: 0.2717 - val_mse: 0.2717\n",
            "Epoch 196/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2788 - mse: 0.2788 - val_loss: 0.2767 - val_mse: 0.2767\n",
            "Epoch 197/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2911 - mse: 0.2911 - val_loss: 0.2822 - val_mse: 0.2822\n",
            "Epoch 198/200\n",
            "1/1 [==============================] - 0s 32ms/step - loss: 0.2730 - mse: 0.2730 - val_loss: 0.2793 - val_mse: 0.2793\n",
            "Epoch 199/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2702 - mse: 0.2702 - val_loss: 0.2786 - val_mse: 0.2786\n",
            "Epoch 200/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2784 - mse: 0.2784 - val_loss: 0.2734 - val_mse: 0.2734\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0l8g2s4Ogwt7"
      },
      "source": [
        "Plot loss"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_FwytYay-fVf"
      },
      "source": [
        ""
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ksInevx1gt33",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "683d8e48-1487-4e58-8676-44874c5820bd"
      },
      "source": [
        "def plot_loss(history):\n",
        "  plt.plot(history.history['loss'], label='loss')\n",
        "  plt.plot(history.history['val_loss'], label='val_loss')\n",
        "  plt.ylim([0, 0.2])\n",
        "  plt.xlabel('Epoch')\n",
        "  plt.ylabel('Error ')\n",
        "  plt.legend()\n",
        "  plt.grid(True)\n",
        "\n",
        "plot_loss(history)\n"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UhWj-M9sWa1A"
      },
      "source": [
        "Evaluate neural network"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wAGobBA6XfTt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3c14efcb-5567-4df1-fbd9-6dee8c4b0427"
      },
      "source": [
        "results = model0.evaluate(XX_test_n, yy_test_n)\n",
        "\n",
        "print('loss test data: ', results[0])\n",
        "print('mse test data: ', results[1])\n",
        "\n",
        "results = model0.evaluate(XX_train_n, yy_train_n)\n",
        "\n",
        "print('loss train data: ', results[0])\n",
        "print('mse train data: ', results[1])"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "7/7 [==============================] - 0s 2ms/step - loss: 0.2734 - mse: 0.2734\n",
            "loss test data:  0.2734183073043823\n",
            "mse test data:  0.2734183073043823\n",
            "7/7 [==============================] - 0s 3ms/step - loss: 0.2711 - mse: 0.2711\n",
            "loss train data:  0.2710511088371277\n",
            "mse train data:  0.2710511088371277\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8qv-t09rWgT8"
      },
      "source": [
        "Plot results"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JwHkHPnzvD_z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "outputId": "6ead4810-addc-4f8f-b8f1-048dd2bbc79e"
      },
      "source": [
        "fig = plt.figure(figsize=(7,7))\n",
        "\n",
        "plt.plot(XX_train_n,yy_train_n, 'o', color='blue', label='Training points')\n",
        "plt.plot(XX_test_n,yy_test_n, 'o', color='green', label='Testing points')\n",
        "\n",
        "points = np.linspace(min(XX_test_n), max(XX_test_n),num=100)\n",
        "plt.plot(points, (funct(points*std+mean)-mean1)/std1,  color='red', label='Function')\n",
        "\n",
        "plt.plot(points, model0.predict(points),  color='orange', label='Neural net')\n",
        "\n",
        "\n",
        "plt.legend()\n",
        "\n",
        "\n",
        "plt.show"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 504x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xnwcHVfaHJif"
      },
      "source": [
        "**The Boston Housing Price dataset**\n",
        "\n",
        "We will be attempting to predict the median price of homes in a given Boston suburb in the mid-1970s, given a few data points about the suburb at the time, such as the crime rate, the local property tax rate, etc.\n",
        "\n",
        "The dataset has very few data points, only 506 in total, split between 404 training samples and 102 test samples, and each \"feature\" in the input data (e.g. the crime rate is a feature) has a different scale. For instance some values are proportions, which take a values between 0 and 1, others take values between 1 and 12, others between 0 and 100..."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "__lqdBmD9cgL"
      },
      "source": [
        "from keras.datasets import boston_housing\n",
        "\n",
        "(X_train, y_train), (X_test, y_test) = boston_housing.load_data()\n"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZDCcGuFW9RP6"
      },
      "source": [
        "\n",
        "**Preparing the data**\n",
        "\n",
        "It would be problematic to feed into a neural network values that all take wildly different ranges. The network might be able to automatically adapt to such heterogeneous data, but it would definitely make learning more difficult. A widespread best practice to deal with such data is to do feature-wise normalization: for each feature in the input data (a column in the input data matrix), we will subtract the mean of the feature and divide by the standard deviation, so that the feature will be centered around 0 and will have a unit standard deviation. This is easily done in Numpy:\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NRPumcs09RP7"
      },
      "source": [
        ""
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uuj5f4Mg6e5y"
      },
      "source": [
        "\n",
        "mean = XX_train.mean(axis=0)\n",
        "XX_train_n = XX_train-mean\n",
        "std = XX_train_n.std(axis=0)\n",
        "XX_train_n /= std\n",
        "\n",
        "# to samo dla X_test\n",
        "XX_test_n = XX_test - mean\n",
        "XX_test_n /= std\n",
        "\n",
        "# A teraz to samo dla yy_train i yy_test\n",
        "mean1 = yy_train.mean(axis=0)\n",
        "yy_train_n = yy_train-mean1\n",
        "std1 = yy_train_n.std(axis=0)\n",
        "yy_train_n /= std1\n",
        "# to samo dla y_test\n",
        "yy_test_n = yy_test - mean1\n",
        "yy_test_n /= std1\n",
        "\n"
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TO8600UMw4Ev",
        "outputId": "245ea3ee-8b6c-4d49-e143-c4f21db9b654"
      },
      "source": [
        "\n",
        "history = model0.fit(XX_train_n,yy_train_n, epochs=200, batch_size=512, validation_data=(XX_test_n, yy_test_n))"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/200\n",
            "1/1 [==============================] - 0s 52ms/step - loss: 0.2895 - mse: 0.2895 - val_loss: 0.2709 - val_mse: 0.2709\n",
            "Epoch 2/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2785 - mse: 0.2785 - val_loss: 0.2770 - val_mse: 0.2770\n",
            "Epoch 3/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2777 - mse: 0.2777 - val_loss: 0.2780 - val_mse: 0.2780\n",
            "Epoch 4/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2766 - mse: 0.2766 - val_loss: 0.2797 - val_mse: 0.2797\n",
            "Epoch 5/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2723 - mse: 0.2723 - val_loss: 0.2737 - val_mse: 0.2737\n",
            "Epoch 6/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2861 - mse: 0.2861 - val_loss: 0.2696 - val_mse: 0.2696\n",
            "Epoch 7/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2680 - mse: 0.2680 - val_loss: 0.2741 - val_mse: 0.2741\n",
            "Epoch 8/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2736 - mse: 0.2736 - val_loss: 0.2828 - val_mse: 0.2828\n",
            "Epoch 9/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2831 - mse: 0.2831 - val_loss: 0.2801 - val_mse: 0.2801\n",
            "Epoch 10/200\n",
            "1/1 [==============================] - 0s 32ms/step - loss: 0.2800 - mse: 0.2800 - val_loss: 0.2712 - val_mse: 0.2712\n",
            "Epoch 11/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2825 - mse: 0.2825 - val_loss: 0.2728 - val_mse: 0.2728\n",
            "Epoch 12/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2809 - mse: 0.2809 - val_loss: 0.2772 - val_mse: 0.2772\n",
            "Epoch 13/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2793 - mse: 0.2793 - val_loss: 0.2830 - val_mse: 0.2830\n",
            "Epoch 14/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2800 - mse: 0.2800 - val_loss: 0.2808 - val_mse: 0.2808\n",
            "Epoch 15/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2922 - mse: 0.2922 - val_loss: 0.2754 - val_mse: 0.2754\n",
            "Epoch 16/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2798 - mse: 0.2798 - val_loss: 0.2731 - val_mse: 0.2731\n",
            "Epoch 17/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2887 - mse: 0.2887 - val_loss: 0.2821 - val_mse: 0.2821\n",
            "Epoch 18/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2869 - mse: 0.2869 - val_loss: 0.2816 - val_mse: 0.2816\n",
            "Epoch 19/200\n",
            "1/1 [==============================] - 0s 32ms/step - loss: 0.2744 - mse: 0.2744 - val_loss: 0.2764 - val_mse: 0.2764\n",
            "Epoch 20/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2734 - mse: 0.2734 - val_loss: 0.2682 - val_mse: 0.2682\n",
            "Epoch 21/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2965 - mse: 0.2965 - val_loss: 0.2717 - val_mse: 0.2717\n",
            "Epoch 22/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2791 - mse: 0.2791 - val_loss: 0.2890 - val_mse: 0.2890\n",
            "Epoch 23/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2847 - mse: 0.2847 - val_loss: 0.2895 - val_mse: 0.2895\n",
            "Epoch 24/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2866 - mse: 0.2866 - val_loss: 0.2716 - val_mse: 0.2716\n",
            "Epoch 25/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2783 - mse: 0.2783 - val_loss: 0.2647 - val_mse: 0.2647\n",
            "Epoch 26/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2870 - mse: 0.2870 - val_loss: 0.2750 - val_mse: 0.2750\n",
            "Epoch 27/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2794 - mse: 0.2794 - val_loss: 0.2961 - val_mse: 0.2961\n",
            "Epoch 28/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2779 - mse: 0.2779 - val_loss: 0.2868 - val_mse: 0.2868\n",
            "Epoch 29/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2852 - mse: 0.2852 - val_loss: 0.2722 - val_mse: 0.2722\n",
            "Epoch 30/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2807 - mse: 0.2807 - val_loss: 0.2719 - val_mse: 0.2719\n",
            "Epoch 31/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2731 - mse: 0.2731 - val_loss: 0.2754 - val_mse: 0.2754\n",
            "Epoch 32/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2840 - mse: 0.2840 - val_loss: 0.2871 - val_mse: 0.2871\n",
            "Epoch 33/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2917 - mse: 0.2917 - val_loss: 0.2955 - val_mse: 0.2955\n",
            "Epoch 34/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2825 - mse: 0.2825 - val_loss: 0.2805 - val_mse: 0.2805\n",
            "Epoch 35/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2805 - mse: 0.2805 - val_loss: 0.2722 - val_mse: 0.2722\n",
            "Epoch 36/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2996 - mse: 0.2996 - val_loss: 0.2804 - val_mse: 0.2804\n",
            "Epoch 37/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2809 - mse: 0.2809 - val_loss: 0.2969 - val_mse: 0.2969\n",
            "Epoch 38/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2796 - mse: 0.2796 - val_loss: 0.2925 - val_mse: 0.2925\n",
            "Epoch 39/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2753 - mse: 0.2753 - val_loss: 0.2760 - val_mse: 0.2760\n",
            "Epoch 40/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2772 - mse: 0.2772 - val_loss: 0.2712 - val_mse: 0.2712\n",
            "Epoch 41/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2702 - mse: 0.2702 - val_loss: 0.2755 - val_mse: 0.2755\n",
            "Epoch 42/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2651 - mse: 0.2651 - val_loss: 0.2872 - val_mse: 0.2872\n",
            "Epoch 43/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2894 - mse: 0.2894 - val_loss: 0.2824 - val_mse: 0.2824\n",
            "Epoch 44/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2664 - mse: 0.2664 - val_loss: 0.2729 - val_mse: 0.2729\n",
            "Epoch 45/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2848 - mse: 0.2848 - val_loss: 0.2731 - val_mse: 0.2731\n",
            "Epoch 46/200\n",
            "1/1 [==============================] - 0s 34ms/step - loss: 0.2909 - mse: 0.2909 - val_loss: 0.2841 - val_mse: 0.2841\n",
            "Epoch 47/200\n",
            "1/1 [==============================] - 0s 37ms/step - loss: 0.2739 - mse: 0.2739 - val_loss: 0.2867 - val_mse: 0.2867\n",
            "Epoch 48/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2805 - mse: 0.2805 - val_loss: 0.2814 - val_mse: 0.2814\n",
            "Epoch 49/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2696 - mse: 0.2696 - val_loss: 0.2732 - val_mse: 0.2732\n",
            "Epoch 50/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2605 - mse: 0.2605 - val_loss: 0.2736 - val_mse: 0.2736\n",
            "Epoch 51/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2973 - mse: 0.2973 - val_loss: 0.2875 - val_mse: 0.2875\n",
            "Epoch 52/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2809 - mse: 0.2809 - val_loss: 0.2936 - val_mse: 0.2936\n",
            "Epoch 53/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2783 - mse: 0.2783 - val_loss: 0.2810 - val_mse: 0.2810\n",
            "Epoch 54/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2709 - mse: 0.2709 - val_loss: 0.2750 - val_mse: 0.2750\n",
            "Epoch 55/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2825 - mse: 0.2825 - val_loss: 0.2768 - val_mse: 0.2768\n",
            "Epoch 56/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2643 - mse: 0.2643 - val_loss: 0.2831 - val_mse: 0.2831\n",
            "Epoch 57/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2712 - mse: 0.2712 - val_loss: 0.2845 - val_mse: 0.2845\n",
            "Epoch 58/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2743 - mse: 0.2743 - val_loss: 0.2777 - val_mse: 0.2777\n",
            "Epoch 59/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2665 - mse: 0.2665 - val_loss: 0.2755 - val_mse: 0.2755\n",
            "Epoch 60/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2822 - mse: 0.2822 - val_loss: 0.2789 - val_mse: 0.2789\n",
            "Epoch 61/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2785 - mse: 0.2785 - val_loss: 0.2831 - val_mse: 0.2831\n",
            "Epoch 62/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2683 - mse: 0.2683 - val_loss: 0.2883 - val_mse: 0.2883\n",
            "Epoch 63/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2718 - mse: 0.2718 - val_loss: 0.2878 - val_mse: 0.2878\n",
            "Epoch 64/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2796 - mse: 0.2796 - val_loss: 0.2770 - val_mse: 0.2770\n",
            "Epoch 65/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2803 - mse: 0.2803 - val_loss: 0.2727 - val_mse: 0.2727\n",
            "Epoch 66/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2811 - mse: 0.2811 - val_loss: 0.2792 - val_mse: 0.2792\n",
            "Epoch 67/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2681 - mse: 0.2681 - val_loss: 0.2873 - val_mse: 0.2873\n",
            "Epoch 68/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2830 - mse: 0.2830 - val_loss: 0.2811 - val_mse: 0.2811\n",
            "Epoch 69/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2796 - mse: 0.2796 - val_loss: 0.2807 - val_mse: 0.2807\n",
            "Epoch 70/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2674 - mse: 0.2674 - val_loss: 0.2818 - val_mse: 0.2818\n",
            "Epoch 71/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2828 - mse: 0.2828 - val_loss: 0.2771 - val_mse: 0.2771\n",
            "Epoch 72/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2663 - mse: 0.2663 - val_loss: 0.2729 - val_mse: 0.2729\n",
            "Epoch 73/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2788 - mse: 0.2788 - val_loss: 0.2759 - val_mse: 0.2759\n",
            "Epoch 74/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2823 - mse: 0.2823 - val_loss: 0.2793 - val_mse: 0.2793\n",
            "Epoch 75/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2762 - mse: 0.2762 - val_loss: 0.2821 - val_mse: 0.2821\n",
            "Epoch 76/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2850 - mse: 0.2850 - val_loss: 0.2709 - val_mse: 0.2709\n",
            "Epoch 77/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2682 - mse: 0.2682 - val_loss: 0.2667 - val_mse: 0.2667\n",
            "Epoch 78/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2660 - mse: 0.2660 - val_loss: 0.2749 - val_mse: 0.2749\n",
            "Epoch 79/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2719 - mse: 0.2719 - val_loss: 0.2858 - val_mse: 0.2858\n",
            "Epoch 80/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2855 - mse: 0.2855 - val_loss: 0.2822 - val_mse: 0.2822\n",
            "Epoch 81/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2686 - mse: 0.2686 - val_loss: 0.2716 - val_mse: 0.2716\n",
            "Epoch 82/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2806 - mse: 0.2806 - val_loss: 0.2683 - val_mse: 0.2683\n",
            "Epoch 83/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2785 - mse: 0.2785 - val_loss: 0.2738 - val_mse: 0.2738\n",
            "Epoch 84/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2730 - mse: 0.2730 - val_loss: 0.2792 - val_mse: 0.2792\n",
            "Epoch 85/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2710 - mse: 0.2710 - val_loss: 0.2778 - val_mse: 0.2778\n",
            "Epoch 86/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2659 - mse: 0.2659 - val_loss: 0.2766 - val_mse: 0.2766\n",
            "Epoch 87/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2786 - mse: 0.2786 - val_loss: 0.2751 - val_mse: 0.2751\n",
            "Epoch 88/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2674 - mse: 0.2674 - val_loss: 0.2760 - val_mse: 0.2760\n",
            "Epoch 89/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2838 - mse: 0.2838 - val_loss: 0.2798 - val_mse: 0.2798\n",
            "Epoch 90/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2721 - mse: 0.2721 - val_loss: 0.2771 - val_mse: 0.2771\n",
            "Epoch 91/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2850 - mse: 0.2850 - val_loss: 0.2782 - val_mse: 0.2782\n",
            "Epoch 92/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2793 - mse: 0.2793 - val_loss: 0.2778 - val_mse: 0.2778\n",
            "Epoch 93/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2633 - mse: 0.2633 - val_loss: 0.2774 - val_mse: 0.2774\n",
            "Epoch 94/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2663 - mse: 0.2663 - val_loss: 0.2801 - val_mse: 0.2801\n",
            "Epoch 95/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2760 - mse: 0.2760 - val_loss: 0.2825 - val_mse: 0.2825\n",
            "Epoch 96/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2824 - mse: 0.2824 - val_loss: 0.2749 - val_mse: 0.2749\n",
            "Epoch 97/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2799 - mse: 0.2799 - val_loss: 0.2694 - val_mse: 0.2694\n",
            "Epoch 98/200\n",
            "1/1 [==============================] - 0s 35ms/step - loss: 0.2721 - mse: 0.2721 - val_loss: 0.2723 - val_mse: 0.2723\n",
            "Epoch 99/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2722 - mse: 0.2722 - val_loss: 0.2807 - val_mse: 0.2807\n",
            "Epoch 100/200\n",
            "1/1 [==============================] - 0s 46ms/step - loss: 0.2757 - mse: 0.2757 - val_loss: 0.2877 - val_mse: 0.2877\n",
            "Epoch 101/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2726 - mse: 0.2726 - val_loss: 0.2838 - val_mse: 0.2838\n",
            "Epoch 102/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2755 - mse: 0.2755 - val_loss: 0.2758 - val_mse: 0.2758\n",
            "Epoch 103/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2756 - mse: 0.2756 - val_loss: 0.2732 - val_mse: 0.2732\n",
            "Epoch 104/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2620 - mse: 0.2620 - val_loss: 0.2794 - val_mse: 0.2794\n",
            "Epoch 105/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2663 - mse: 0.2663 - val_loss: 0.2814 - val_mse: 0.2814\n",
            "Epoch 106/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2739 - mse: 0.2739 - val_loss: 0.2778 - val_mse: 0.2778\n",
            "Epoch 107/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2585 - mse: 0.2585 - val_loss: 0.2696 - val_mse: 0.2696\n",
            "Epoch 108/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2730 - mse: 0.2730 - val_loss: 0.2668 - val_mse: 0.2668\n",
            "Epoch 109/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2618 - mse: 0.2618 - val_loss: 0.2777 - val_mse: 0.2777\n",
            "Epoch 110/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2641 - mse: 0.2641 - val_loss: 0.2901 - val_mse: 0.2901\n",
            "Epoch 111/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2632 - mse: 0.2632 - val_loss: 0.2880 - val_mse: 0.2880\n",
            "Epoch 112/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2718 - mse: 0.2718 - val_loss: 0.2711 - val_mse: 0.2711\n",
            "Epoch 113/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2813 - mse: 0.2813 - val_loss: 0.2689 - val_mse: 0.2689\n",
            "Epoch 114/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2736 - mse: 0.2736 - val_loss: 0.2730 - val_mse: 0.2730\n",
            "Epoch 115/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2696 - mse: 0.2696 - val_loss: 0.2834 - val_mse: 0.2834\n",
            "Epoch 116/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2717 - mse: 0.2717 - val_loss: 0.2822 - val_mse: 0.2822\n",
            "Epoch 117/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2760 - mse: 0.2760 - val_loss: 0.2748 - val_mse: 0.2748\n",
            "Epoch 118/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2619 - mse: 0.2619 - val_loss: 0.2721 - val_mse: 0.2721\n",
            "Epoch 119/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2801 - mse: 0.2801 - val_loss: 0.2720 - val_mse: 0.2720\n",
            "Epoch 120/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2698 - mse: 0.2698 - val_loss: 0.2778 - val_mse: 0.2778\n",
            "Epoch 121/200\n",
            "1/1 [==============================] - 0s 34ms/step - loss: 0.2716 - mse: 0.2716 - val_loss: 0.2810 - val_mse: 0.2810\n",
            "Epoch 122/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2786 - mse: 0.2786 - val_loss: 0.2765 - val_mse: 0.2765\n",
            "Epoch 123/200\n",
            "1/1 [==============================] - 0s 34ms/step - loss: 0.2729 - mse: 0.2729 - val_loss: 0.2734 - val_mse: 0.2734\n",
            "Epoch 124/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2636 - mse: 0.2636 - val_loss: 0.2724 - val_mse: 0.2724\n",
            "Epoch 125/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2709 - mse: 0.2709 - val_loss: 0.2728 - val_mse: 0.2728\n",
            "Epoch 126/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2636 - mse: 0.2636 - val_loss: 0.2755 - val_mse: 0.2755\n",
            "Epoch 127/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2753 - mse: 0.2753 - val_loss: 0.2802 - val_mse: 0.2802\n",
            "Epoch 128/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2578 - mse: 0.2578 - val_loss: 0.2757 - val_mse: 0.2757\n",
            "Epoch 129/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2745 - mse: 0.2745 - val_loss: 0.2711 - val_mse: 0.2711\n",
            "Epoch 130/200\n",
            "1/1 [==============================] - 0s 25ms/step - loss: 0.2729 - mse: 0.2729 - val_loss: 0.2729 - val_mse: 0.2729\n",
            "Epoch 131/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2673 - mse: 0.2673 - val_loss: 0.2785 - val_mse: 0.2785\n",
            "Epoch 132/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2705 - mse: 0.2705 - val_loss: 0.2823 - val_mse: 0.2823\n",
            "Epoch 133/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2769 - mse: 0.2769 - val_loss: 0.2783 - val_mse: 0.2783\n",
            "Epoch 134/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2566 - mse: 0.2566 - val_loss: 0.2723 - val_mse: 0.2723\n",
            "Epoch 135/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2720 - mse: 0.2720 - val_loss: 0.2687 - val_mse: 0.2687\n",
            "Epoch 136/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2674 - mse: 0.2674 - val_loss: 0.2749 - val_mse: 0.2749\n",
            "Epoch 137/200\n",
            "1/1 [==============================] - 0s 35ms/step - loss: 0.2745 - mse: 0.2745 - val_loss: 0.2845 - val_mse: 0.2845\n",
            "Epoch 138/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2613 - mse: 0.2613 - val_loss: 0.2776 - val_mse: 0.2776\n",
            "Epoch 139/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2746 - mse: 0.2746 - val_loss: 0.2683 - val_mse: 0.2683\n",
            "Epoch 140/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2704 - mse: 0.2704 - val_loss: 0.2689 - val_mse: 0.2689\n",
            "Epoch 141/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2703 - mse: 0.2703 - val_loss: 0.2788 - val_mse: 0.2788\n",
            "Epoch 142/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2782 - mse: 0.2782 - val_loss: 0.2967 - val_mse: 0.2967\n",
            "Epoch 143/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2757 - mse: 0.2757 - val_loss: 0.2913 - val_mse: 0.2913\n",
            "Epoch 144/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2788 - mse: 0.2788 - val_loss: 0.2711 - val_mse: 0.2711\n",
            "Epoch 145/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2651 - mse: 0.2651 - val_loss: 0.2667 - val_mse: 0.2667\n",
            "Epoch 146/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2932 - mse: 0.2932 - val_loss: 0.2710 - val_mse: 0.2710\n",
            "Epoch 147/200\n",
            "1/1 [==============================] - 0s 36ms/step - loss: 0.2701 - mse: 0.2701 - val_loss: 0.2850 - val_mse: 0.2850\n",
            "Epoch 148/200\n",
            "1/1 [==============================] - 0s 38ms/step - loss: 0.2655 - mse: 0.2655 - val_loss: 0.2959 - val_mse: 0.2959\n",
            "Epoch 149/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2696 - mse: 0.2696 - val_loss: 0.2798 - val_mse: 0.2798\n",
            "Epoch 150/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2707 - mse: 0.2707 - val_loss: 0.2688 - val_mse: 0.2688\n",
            "Epoch 151/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2671 - mse: 0.2671 - val_loss: 0.2665 - val_mse: 0.2665\n",
            "Epoch 152/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2866 - mse: 0.2866 - val_loss: 0.2740 - val_mse: 0.2740\n",
            "Epoch 153/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2719 - mse: 0.2719 - val_loss: 0.2877 - val_mse: 0.2877\n",
            "Epoch 154/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2685 - mse: 0.2685 - val_loss: 0.2836 - val_mse: 0.2836\n",
            "Epoch 155/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2710 - mse: 0.2710 - val_loss: 0.2712 - val_mse: 0.2712\n",
            "Epoch 156/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2724 - mse: 0.2724 - val_loss: 0.2669 - val_mse: 0.2669\n",
            "Epoch 157/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2692 - mse: 0.2692 - val_loss: 0.2724 - val_mse: 0.2724\n",
            "Epoch 158/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2607 - mse: 0.2607 - val_loss: 0.2824 - val_mse: 0.2824\n",
            "Epoch 159/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2781 - mse: 0.2781 - val_loss: 0.2917 - val_mse: 0.2917\n",
            "Epoch 160/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2701 - mse: 0.2701 - val_loss: 0.2793 - val_mse: 0.2793\n",
            "Epoch 161/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2771 - mse: 0.2771 - val_loss: 0.2732 - val_mse: 0.2732\n",
            "Epoch 162/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2717 - mse: 0.2717 - val_loss: 0.2705 - val_mse: 0.2705\n",
            "Epoch 163/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2781 - mse: 0.2781 - val_loss: 0.2757 - val_mse: 0.2757\n",
            "Epoch 164/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2613 - mse: 0.2613 - val_loss: 0.2833 - val_mse: 0.2833\n",
            "Epoch 165/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2778 - mse: 0.2778 - val_loss: 0.2812 - val_mse: 0.2812\n",
            "Epoch 166/200\n",
            "1/1 [==============================] - 0s 26ms/step - loss: 0.2638 - mse: 0.2638 - val_loss: 0.2754 - val_mse: 0.2754\n",
            "Epoch 167/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2707 - mse: 0.2707 - val_loss: 0.2727 - val_mse: 0.2727\n",
            "Epoch 168/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2586 - mse: 0.2586 - val_loss: 0.2769 - val_mse: 0.2769\n",
            "Epoch 169/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2715 - mse: 0.2715 - val_loss: 0.2821 - val_mse: 0.2821\n",
            "Epoch 170/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2691 - mse: 0.2691 - val_loss: 0.2814 - val_mse: 0.2814\n",
            "Epoch 171/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2659 - mse: 0.2659 - val_loss: 0.2733 - val_mse: 0.2733\n",
            "Epoch 172/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2720 - mse: 0.2720 - val_loss: 0.2690 - val_mse: 0.2690\n",
            "Epoch 173/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2747 - mse: 0.2747 - val_loss: 0.2716 - val_mse: 0.2716\n",
            "Epoch 174/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2730 - mse: 0.2730 - val_loss: 0.2811 - val_mse: 0.2811\n",
            "Epoch 175/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2595 - mse: 0.2595 - val_loss: 0.2853 - val_mse: 0.2853\n",
            "Epoch 176/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2796 - mse: 0.2796 - val_loss: 0.2803 - val_mse: 0.2803\n",
            "Epoch 177/200\n",
            "1/1 [==============================] - 0s 32ms/step - loss: 0.2666 - mse: 0.2666 - val_loss: 0.2700 - val_mse: 0.2700\n",
            "Epoch 178/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2665 - mse: 0.2665 - val_loss: 0.2664 - val_mse: 0.2664\n",
            "Epoch 179/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2679 - mse: 0.2679 - val_loss: 0.2695 - val_mse: 0.2695\n",
            "Epoch 180/200\n",
            "1/1 [==============================] - 0s 32ms/step - loss: 0.2636 - mse: 0.2636 - val_loss: 0.2768 - val_mse: 0.2768\n",
            "Epoch 181/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2774 - mse: 0.2774 - val_loss: 0.2895 - val_mse: 0.2895\n",
            "Epoch 182/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2804 - mse: 0.2804 - val_loss: 0.2900 - val_mse: 0.2900\n",
            "Epoch 183/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2709 - mse: 0.2709 - val_loss: 0.2792 - val_mse: 0.2792\n",
            "Epoch 184/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2607 - mse: 0.2607 - val_loss: 0.2696 - val_mse: 0.2696\n",
            "Epoch 185/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2780 - mse: 0.2780 - val_loss: 0.2693 - val_mse: 0.2693\n",
            "Epoch 186/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2655 - mse: 0.2655 - val_loss: 0.2767 - val_mse: 0.2767\n",
            "Epoch 187/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2805 - mse: 0.2805 - val_loss: 0.2852 - val_mse: 0.2852\n",
            "Epoch 188/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2718 - mse: 0.2718 - val_loss: 0.2820 - val_mse: 0.2820\n",
            "Epoch 189/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2614 - mse: 0.2614 - val_loss: 0.2745 - val_mse: 0.2745\n",
            "Epoch 190/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2803 - mse: 0.2803 - val_loss: 0.2670 - val_mse: 0.2670\n",
            "Epoch 191/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2657 - mse: 0.2657 - val_loss: 0.2689 - val_mse: 0.2689\n",
            "Epoch 192/200\n",
            "1/1 [==============================] - 0s 31ms/step - loss: 0.2677 - mse: 0.2677 - val_loss: 0.2788 - val_mse: 0.2788\n",
            "Epoch 193/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2667 - mse: 0.2667 - val_loss: 0.2825 - val_mse: 0.2825\n",
            "Epoch 194/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2700 - mse: 0.2700 - val_loss: 0.2810 - val_mse: 0.2810\n",
            "Epoch 195/200\n",
            "1/1 [==============================] - 0s 29ms/step - loss: 0.2590 - mse: 0.2590 - val_loss: 0.2757 - val_mse: 0.2757\n",
            "Epoch 196/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2577 - mse: 0.2577 - val_loss: 0.2706 - val_mse: 0.2706\n",
            "Epoch 197/200\n",
            "1/1 [==============================] - 0s 39ms/step - loss: 0.2740 - mse: 0.2740 - val_loss: 0.2688 - val_mse: 0.2688\n",
            "Epoch 198/200\n",
            "1/1 [==============================] - 0s 28ms/step - loss: 0.2681 - mse: 0.2681 - val_loss: 0.2728 - val_mse: 0.2728\n",
            "Epoch 199/200\n",
            "1/1 [==============================] - 0s 27ms/step - loss: 0.2604 - mse: 0.2604 - val_loss: 0.2794 - val_mse: 0.2794\n",
            "Epoch 200/200\n",
            "1/1 [==============================] - 0s 30ms/step - loss: 0.2615 - mse: 0.2615 - val_loss: 0.2843 - val_mse: 0.2843\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "86NDw6Qm91dC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "7ac326b8-0ef4-4834-8cbd-f0b8bcf68d84"
      },
      "source": [
        "def plot_loss(history):\n",
        "  plt.plot(history.history['loss'], label='loss')\n",
        "  plt.plot(history.history['val_loss'], label='val_loss')\n",
        "  plt.ylim([0, 0.5])\n",
        "  plt.xlabel('Epoch')\n",
        "  plt.ylabel('Error [MPG]')\n",
        "  plt.legend()\n",
        "  plt.grid(True)\n",
        "\n",
        "plot_loss(history)\n"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAEKCAYAAAAfGVI8AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdd3gU1frA8e/ZTSc9QCgJhBJ6aAkgvSkgKqiA2FBs2BCRa0Gvcr22q6L4s2BFipUiqCAgIi3SIRBKqCGQkEBIJSE92T2/P2aFBFIIsgHd9/M8+2Rn5szMu5PZeeecMzOrtNYIIYRwXKYrHYAQQogrSxKBEEI4OEkEQgjh4CQRCCGEg5NEIIQQDk4SgRBCODi7JgKl1BCl1EGlVKxSanI508cqpVKVUtG214P2jEcIIcSFnOy1YKWUGZgOXAckAtuUUou11vvOKzpPaz3eXnEIIYSonD1rBF2BWK11nNa6CJgLDLfj+oQQQlwCu9UIgIbA8VLDiUC3csqNUEr1AQ4BT2mtj59fQCk1DhgH4O7uHh4cHHxJAVmtVkymq7Nb5GqNTeKqHomr+q7W2P5pcR06dChNa12n3Ilaa7u8gJHAjFLDY4CPzisTALja3j8MrK5queHh4fpSrVmz5pLntberNTaJq3okruq7WmP7p8UFbNcVHFftme6SgNKn7kG2caWTULrWutA2OAMIt2M8QgghymHPRLANCFVKNVFKuQC3A4tLF1BK1S81OAzYb8d4hBBClMNufQRa6xKl1HhgBWAGZmqtY5RSr2BUURYDE5RSw4ASIAMYa694hBBClM+encVorZcBy84bN6XU++eB5+0ZgxDin6G4uJjExEQKCgpqZH0+Pj7s33/1NVJUFZebmxtBQUE4Oztf9DLtmgiEEOJySUxMxMvLi5CQEJRSdl/fmTNn8PLysvt6qquyuLTWpKenk5iYSJMmTS56mVfftVFCCFGOgoICAgICaiQJ/F0ppQgICKh2rUkSgRDib0OSQNUuZRtJIhBCCAcniUAIIS6Sp6fnlQ7BLiQRCCGEg5NEIIQQ1aS15plnnqFdu3aEhYUxb948AE6ePEmfPn3o2LEj7dq1448//sBisTB27NizZd97770rHP2F5PJRIcTfzn+XxLDvRPZlXWabBt7856a2F1V20aJFREdHs2vXLtLS0ujSpQt9+vThu+++Y/Dgwfz73//GYrGQl5dHdHQ0SUlJ7N27F4DTp09f1rgvB6kRCCFENa1fv5477rgDs9lMYGAgffv2Zdu2bXTp0oVZs2bx8ssvs2fPHry8vGjatClxcXE88cQT/Prrr3h7e1/p8C8gNQIhxN/OxZ6517Q+ffoQGRnJ0qVLGTt2LJMmTeKee+5h165drFixgk8//ZT58+czc+bMKx1qGVIjEEKIaurduzfz5s3DYrGQmppKZGQkXbt2JT4+nsDAQB566CEefPBBduzYQVpaGlarlREjRvDaa6+xY8eOKx3+BaRGIIQQ1XTLLbewadMmOnTogFKKt99+m3r16jFnzhymTp2Ks7Mznp6efPXVVyQlJXHfffdhtVoB+N///neFo7+QJAIhhLhIOTk5gHH37tSpU5k6dWqZ6ffeey/33nvvBfNdjbWA0qRpSAghHJwkAiGEcHCSCIQQwsFJIhBCCAcniUAIIRycJAIhhHBwkgiEEMLBSSIQQgg7qOy3C44dO0a7du1qMJrKSSIQQggHJ3cWCyH+fpZPhuQ9l3eZ9cLg+jcrnDx58mSCg4N5/PHHAXj55ZdxcnJizZo1ZGZmUlxczGuvvcbw4cOrtdqCggIeffRRtm/fjpOTE9OmTaN///7ExMRw3333UVRUhNVqZeHChTRo0ICRI0eSnJyMxWLhpZdeYvTo0X/pY4MkAiGEuCijR49m4sSJZxPB/PnzWbFiBRMmTMDb25u0tDSuueYahg0bVq0fkJ8+fTpKKfbs2cOBAwcYNGgQhw4d4tNPP+XJJ5/krrvuoqioCIvFwrJly6hfvz4rVqwAICsr67J8NkkEQoi/n0rO3O2lU6dOpKSkcOLECVJTU/Hz86NevXo89dRTREZGYjKZSEpK4tSpU9SrV++il7t+/XqeeOIJAFq1akXjxo05dOgQ3bt35/XXXycxMZFbb72V0NBQwsLCmDRpEs899xw33ngjvXv3viyfTfoIhBDiIo0aNYoffviBefPmMXr0aL799ltSU1OJiooiOjqawMBACgoKLsu67rzzThYvXoy7uztDhw5l9erVtGjRgsjISMLCwnjxxRd55ZVXLsu6pEYghBAXafTo0Tz00EOkpaWxbt065s+fT926dXF2dmbNmjXEx8dXe5m9e/fm22+/ZcCAARw6dIiEhARatmxJXFwcTZs2ZcKECSQkJLB7925atWqFh4cHd999N76+vsyYMeOyfC5JBEIIcZHatm3LmTNnaNiwIfXr1+euu+7ipptuIiwsjIiICFq1alXtZT722GM8+uijhIWF4eTkxOzZs3F1dWX+/Pl8/fXXODs7U69ePV544QW2bdvGv/71L5ycnHB2duaTTz65LJ9LEoEQQlTDnj3nrlaqXbs2mzZtKrfcn79dUJ6QkJCzP2bv5ubGrFmzLigzefJkJk+eXGbc4MGD6dGjB15eXpcSeoWkj0AIIRyc1AiEEMJO9uzZw5gxY8qMc3V1ZcuWLVcoovJJIhBC/G1orat1jf6VFhYWRnR0dI2uU2td7XmkaUgI8bfg5uZGenr6JR3oHIXWmvT0dNzc3Ko1n9QIhBB/C0FBQSQmJpKamloj6ysoKKj2AbUmVBWXm5sbQUFB1VqmJAIhxN+Cs7MzTZo0qbH1rV27lk6dOtXY+i6WPeKya9OQUmqIUuqgUipWKTW5knIjlFJaKRVhz3iEEEJcyG6JQCllBqYD1wNtgDuUUm3KKecFPAlcXd3oQgjhIOxZI+gKxGqt47TWRcBcoLzns74KvAVcngd0CCGEqBZlrx54pdRIYIjW+kHb8Bigm9Z6fKkynYF/a61HKKXWAk9rrbeXs6xxwDiAwMDA8Llz515STDk5OZX+atCVdLXGJnFVj8RVfVdrbP+0uPr37x+ltS6/+V1rbZcXMBKYUWp4DPBRqWETsBYIsQ2vBSKqWm54eLi+VGvWrLnkee3tao1N4qoeiav6rtbY/mlxAdt1BcdVezYNJQHBpYaDbOP+5AW0A9YqpY4B1wCLpcNYCCFqlj0TwTYgVCnVRCnlAtwOLP5zotY6S2tdW2sdorUOATYDw3Q5TUNCCCHsx26JQGtdAowHVgD7gfla6xil1CtKqWH2Wq8QQojqsesNZVrrZcCy88ZNqaBsP3vGIoQQonzyrCEhhHBwkgiEEMLBSSIQQggHJ4lACCEcnCQCIYRwcJIIhBDCwUkiEEIIByeJQAghHJwkAiGEcHCSCIQQwsFJIhBCCAcniUAIIRycJAIhhHBwkgiEEMLBSSIQQggHJ4lACCEcnCQCIYRwcJIIhBDCwUkiEEIIByeJQAghHJwkAiGEcHCSCIQQwsFJIhBCCAcniUAIIRycJAIhhHBwkgiEEMLBSSIQQggHJ4lACCEcnCQCIYRwcJIIhBDCwUkiEEIIByeJQAghHJwkAiGEcHBOlU1USu2+iGWkaq0HXqZ4hBBC1LBKEwFgBoZWMl0BiyucqNQQ4H3bcmZord88b/ojwOOABcgBxmmt911E3EIIIS6TqhLBw1rr+MoKKKUeq2C8GZgOXAckAtuUUovPO9B/p7X+1FZ+GDANGHKxwQshhPjrKu0j0Fqvr2oBlZTpCsRqreO01kXAXGD4efNmlxqsBeiq1ifKSs4qIK+o5EqHIYT4G1NaV3zsVUoNB4K01tNtw1uAOrbJz2mtF1Qy70hgiNb6QdvwGKCb1nr8eeUeByYBLsAArfXhcpY1DhgHEBgYGD537tyL/4Sl5OTk4OnpeUnz2tulxKa1ZuLafK6pZ+aOVs6gLm/ff0aBFVWUh5/31bfNrtb/pcRVfVdrbP+0uPr37x+ltY4od6LWusIXsAEILjUcDQQAjYBVVcw7EqNf4M/hMcBHlZS/E5hT2TK11oSHh+tLtWbNmkue96+YvHC3/mrTsUrL7J33itabPql8QdnJWh9eeXYwIT1XN37uF/36tHe1/l8jrZN2Xo5wtdZaWyxWHfafX/WEz1dctmVeTlfqf1kVh43rx8e0Xjyh8jJxkVpHzblgtMNus0t0qXEB23UFx9WqTiFdtNbHSw2v11qna60TMJpyKpMEBJcaDrKNq8hc4OYqlvm3Y7FqFu5IZNGOxErLBR9fDCtfgryMigv9+hx8OwryTwOw76TRstbk9EYoOA3zxkBu+mWJOyOviOyCEnLTEyDyHaik5igcnNUCMT9C1GzYv6TMpNiUHHYdN/ZXVr4Ey54FS3HNxygqVVUi8Cs9oMs269ShctuAUKVUE6WUC3A7511hpJQKLTV4A3BBs9DlpC/zwSy/yMKAd9aydPfJCsskZeZTVGJl34lsSizWigLDI+84WIpg78Lyy2SfwLpvMWgr1oStAOy3JYJ2+jDFPiGQcwpWv3rR8R9Ny2X7sfITT+qZQhRWnsj72FjmqZiLXq6oJksxWP7G/TzpsVCcC2YX+GUSFGSdnfTa0n1MnBcNp4/DiZ1Qkv/X9qU1/4OtX1yGoC+Dv/v/rZSqEsEWpdRD549USj0MbK1sRq11CTAeWAHsB+ZrrWOUUq/YrhACGK+UilFKRWP0E9xb7U9wkeZuTWDyH/kUV3QwvgQbj6QRl5bLjzuNs/1fdp8gKj6zTJkjaTkAeJekkzv3Afi8P2z+tOyCshJxsuQb76O/LXddettM0FZKtIkTe1YDRiLwMpfQSh3nWOAgaNYf4jeUO//pvCIenLOdU9kFABSVWHlgzjbGfR1VboJMOVPIrab1dDAdsX2QVVVvkAuC1nA0EpJ2QFFe9ef/O7H+hf1qwVh4r61xVv13dHKX8fe6VyE3BY6d2wcTMvKIT8+lZF+pmkLitvKXYymuvOaZkwKRU+GPaVe2hpqfCR/3gNcC4fO+/4jaclWJ4CngPqXUGqXUu7bXWmAsMLGqhWutl2mtW2itm2mtX7eNm6K1Xmx7/6TWuq3WuqPWur/W2m6nnf61XDiVp9kSV/4Z8LG0XJKzCqq1zDUHUwDYeCSd/SezGf/dTkZ8spEnvt+J1WrsHHGpuQDcaN6Mz+FFkHmMwq2zmL4mloJiCxm5RXzyw1JjgW2GG2dNp867lcJSTNG2Way2dGSvbkJhnPFF23/yDHc2Oo2zsrCH5tAwAtIOlTkjA2Dd22T+9By/7z9F5KFUAL7adIy41Fysuelk//ISZBwtM0tqdh7POM9jp7U5WZ7NIfb3am0bAHZ9D3Nugi/6w4yBF35h9i6Er26G4upt93Jln6SkxEJRyeVL9BctJ9U4kK+cUv2DQuEZOLQCCrONhHCsygv1rj4nosHJDTrcbgynGF9jrTVJmflYNRTv+QnqtoFadSEpquzsOVa+3hAL/9cefplY8TbcPQ+0Bc6cgJT99vs8Vf0PD/9ufMaQXnBqr/H6m6vq8tEUrXUP4FXgmO31ita6u9b6lP3Du3z6tKiDixl+jSm/Gef+2dt4flHZG6krbEqydbCsOZCKn4czeUUWJi/cjdmkuL1LMEt2nSDmhNFsE5eag7ebE52djpHtFMBG/+GY0w/xwYo9zN2awLeb40k/altvvxcAWL/8O+74fPO5y0ITNuNakMYq1+vIrhNOUO5+ktOzSMjIo5e7cQBfl9sIgsKN8kk7zsVaUgQbPqDJoZmMMEUSl5ZLVn4x7/9+mEF+ySxzfR6fqA9h4QNlqrnWk7uppzL51jqIXW5dIH4TFOaU3Q4p++G3l8o/k81KhOXPQaMe0HMipOwr+4WxWmH1axC3Br3l0wvnr8S7vx3kx8NF50acioH32rLn47sZ8fEf1VoWGO3YqWcKAXhlyT7e/e1g9Raw8QPj4LThfYKPV/Os/mgkWIthxJeAKj8RZCVCSWH1lnu5pew3Ep3VcuG0k7sgsB24+4Jvo7MH6dScQgpLrASQhdvJrdB6GARFXFAj+D2+mIW/LDW2YdRs2PB/F65Da9j5Dfg3M4ZjV5YfZ17GXztD370A/i/sXC2nPEdWgbs/jJhhXKm37+cLy1iKYeYQ4/vxV2qLpZe38EHjRNEOKk0ESik3pdRE4FagCPhEa73aLpHYmZuzmfa1zayIOXX2bP1PiZl5xKXlsisxyzj4L/0XOTNvYeArC/g88ghbj2Zw36ytfLjqMNlJB+GdULK/f5Dc0yk83r85LmYTuxKzmBa4gimu3zHItI11h4zaQlxqLk3reNLZ+Rg7S0KYfdQXJ2XlxrrpfLUpnrnbjtNCJZKqfUh1b0KJfyjFcevZFJfO5IV70FqTtWsJhdqJ5t2HEdzxWlxVMZ/PM/oSQksOkelUl00pztCgs/GBkraf+3DxG6DoDNlO/rzqPIusE4fZkZDJmcIS3vaahxNWIhs+aJylbfrw7Gy+pzYDkOIVxvKCtsbBynaQeuvXA2xdOgs+vsY4CC6ecLaT+0xBMS/+sIOCefcbB42bP4YeT9i+MEYXkdWqSdu5BDLi0F71yfv9Tf7v+yVY049C1Gz27trGLR9vILew5Gz5D1Yd5tfITeT9+jJz1sWwNrHkXKLeuwi0hU4Zy7g1ZTqZuaWSRBW01tw9YwvPL9pDfpGFbzbH8+Hq2LJ9J4Vn4NfnKVjxCpPmRbPmQMq5aTmpsG0GtBsJbW6madzXkHnePZgF2UYiLU/s7+DiCc2vhTotzybx/Sezjf008xi83wHeaQFr36r4gxTl/bUDTn4m/DweEreXP33d27DhfdjzQ9nxVqtx0GzQ0Riu2/ZsjTYx02ju7G7ah0JDi0FGIkiPLXNRxPEzVnqYbI0Bza+DVa/AmeSy6zmxA1IPGPtS3bZwuJxEcHIXvBMKs2+AlAMXTk/aAcuegW1fQlHuhdOPbYCfHoWs47DwIUyWcpKv1nBktdEM61kXGvc8u1+XsX8JJGwyvh+LHio/OVktRjyLxsHxCprL/rTuLdiz4MJ96zKpqmloDhAB7AGuB96xSxQ1JDzQidQzhew8nmnsiBs+gPiNbDpiXGmTkVvEqcQ42D4Tz4TVfGd9ltnL1nPbZ5vYefw07648yM7PH6Y4L4tah35kicuL3NCiFl2b+NNWHWV45mw8oj7nc5f3yN/9E2B0yLb2hwYliUQVNyHLty0AY0JOE5eWS9LpfPr4pXPIGsRHqw+zy9SGcHWQu7s2ZPGuE/wUnYT14K9strbh+vDmhHQaAIBH0kZAUzszmiz/9qScKeSOrw+Q7920bI3g0K9gduVlv7dwpYiw5J/YdyIbf7LxSd3GmlpDmG4ZQXzdARSu+h/a9gVtkLmdBNUAP//a/JgeTLHZHb17Huk5hcxat5+QHW9AvTC49xfjQLnhfQDWHkihffTLuJ3YQua174B/E6hVG924JxnbF3D755to/9/fOPDTW+S4BhI76CtcdBETD96N6cOOsORJgpbezZGERHYmnMZq1bz4815+/305EatG47H5PQaziaxCTbKtv4P9i8lv2JPvSvpzt/l39sXFM3P9UfrbOvJ1Xqbx5S11tUqJxYrVqknKzOPa3CW4xi5l3aEUiixWXJxM/PvHvUZ/UmIUfNIDNn+M66Zp7Ireyn2zt/HmctuBZvN0KCmAvs/B4DeMcVs/P7f99y6ED8Nh1hDjYFqa1kYzQ5O+4OQCDcMhKYqd8Rlc//4fzNl0zEhy1hKo3wHWvmHEY/PKkn3Gvhu/Eaa1hgX3UlxSSefl2rdgzRsXji/Kg+9Gw86vjavS0o+UnZ5/Gg7Ymi/XvVm2gzTzKBSdMeIDqNsanX6YvPy8c4nAvI98Uy2o1wGCuhjlbM1DWmuOn7FyjWkfyW7NYOAU0FaIPa9PavcCMLtC21sg9FpI2Gzsd6Wt/z+jiepUDMy6vuwVdAXZMP9eo6N56SRY+nTZea0W+PFh8AuBUbMh7SC+B7+7cFudioGcU5Q0HcDrS/fxU2EEpB28IPHobTNIMddjf4tHYe8PEPs7+05k8+Cc7eQXWYwEumSCsa/sXwJfXlt+zQKMz/rHu9DxLmhrnwsrq0oEbbTWd2utP8O4L6CPXaKoIR3qmOnnFEPKrLspmNoaVr6EdcFYdhw+jlJGmdxNM9FaM0k9TR2VxYfNtzO2RwjrnxvAhuF59FU7mVpyGw+b/kNDUzr1t77BXd0a8a+ATWgnN3j6EMm1WnF/5gecOplIcnYBXd0SUWj20oQnb+kH7v6EmY5S29OFOp4uBBbGk+MRzJxN8Xx1oiHeKo9Xu5toXd+bxasi8cuP54B3Txr4uqM860Djnjzht5k5fXJwOpNEw2tuZeK1ocSn5/JbVhAlCdtYvvsEu49nwsHl0LQvG7MCiLS2p1/havYcT2e09x6UtpIePJjdSdk8mTwEV11IyroZYCmhad5uDrp34LrGznRuWo/PCgehYhaxe9Nv3Gf6lbqWFKzXvQZNekPYSNjyGRzfSsCm17jNaR2f6JE8tCPk7Lbf79sf/7yj+OTE8USLTHqZY1jiegMbsutwQ9EbzK33DC8Vj+Xk4M/wLErlHefP2HU8k+V7k0ne9hM/uL9OAS6c0r7c5GIkul3HTxtfwLRD7PXpy3eWgTgrC/m7f2b+9uMcS8/l8e+iOP75aPj6FpjWBlZOwZp6mEHvRTJt5SFyV77Ba86zmG6ehtdP9/Cr62R2ek3i9cx/kTVrFMwcDBrSbpxJoXbi1bprubVzQz6LPMLRk6kQNQda3QB1WoBPQ1Lq9oQdXxsHqVP7jOq8T5DR/7PmdaP28Ke0Q5CVAM1tz2xs0Any0vh9s3GQnPHHUXTMj0bfz+3fgpsPrJ8GQMqZAmZuOMrq5Qvgq+FGjWv/Yqa/9gQHkkvfsG8ITF5rJJJ1b8GOr8pO/GWi0Vwz+A2sKAq/Glm232bfz2AphD7PQEYc7C51Q2eCUXN8N6YWj3wdxSGCUdYSXp+zhMRM4wKBvs4HiHFqC2Yno9ZqdjUSM0atwWoppovpIJutbYyTC896ZZt+rBaIWQSh1/HyyiTmZoeBtZiUtZ+dvXJu1i9rscb8BBH380evr7DmZ8Gql88tY8ULkJ0I96+AiAeMg3NOqZrd0XVGTWDAv6HtLaw296Rxyu8XXupqi3vSNj+++OMorx9tjkZBzCIsVs2j30QRHbUJFb+BLwv6MyFpINo7CP6YxvK9J/l9/ym2x2cYn2fnN9DnWXj6kPG//+Upo4ZZmtViXInlEwTXV1Ij/IuqSgRnt4LtKqC/tdpFicxyfpNe5n2sNPXiqaJHMeWcovXhz+nXog7OykLd2PmkBfZkUX5nMhoOIDxzOS8PDcUzL5GGkc9CYBhPvziNGS9NwNTjcYiazfUFSxlQHIlqczPUqk3atf+HJ3kkLTLa/FtZYwGYOuFeeoTWgfodMCfvZvqdnfl8WCCq6AyNG4XwxT0RBLTpB4BK2MS4Pk1ol2mcGXmE3XDug3R9CNec4/Td/1+oVQfn9iOZeG0Lfni0BwfMoTjlp/LR94uY9tUCOB1PUbPBJGcXsM79OuqrDIoOr2Oo03bwbUTd0C7kF1vYUxLMZmtr3KJnwomdeOg8jntH4Omi+PqBbuxv9iCn8KPrxod5znkuKy2dSfAxzu70gBcpcfeHL6+jx6nvWO4xDPOA59ken8mxNKMKPi2xJUU48UnAfB4unEOOkz9vpfch8nAauT4t6DV6El9bBjE/N5w3S+5kkDmKoN0fkrfxC75weRfnwFYs7foVyyzd6Kl246UK2JWYdfa69R8LOpHm2ZoTKhDfY8s4kHyGZwe34r+Nd9Po9BZOh91vnI1u/AjT9Ajeyn6GoZvvpOX+j1hk7cNMPYwOxbuxuvnh0rQnhThjSj8MrW+Ch9cx9Vgoi3Q/uues5MU+fjibTUQtmwn5GaS3uZe7Zmzmuy0JHAq8EQqzWPbew+yfPR7t6gV3L4SRs9CNe6HXvW3028C5s+zQQcbfhkbTXvL+DQT5ueOcFYdK3g3tbgVXL7I7PAAHfmHD+jXEnMjGlSLuTn2XEu9GFD66lZWmXkzQ37Pxm1exlr467tgGWhz6hPSAcFLr9oClT5MRu9VIGLGrjE7YPs+gr3mMt2v9C9esOKwbPzo3/665WANCiW7+OASGYd3yBRuPpBlNc3sXUuQVzIcxrvwak8wTq4zmlLzE3Rw+lUMLjxyCrElEFrcyluXqCc0GGP83rTmQfIYO6gjuqohluaFkFZQYzWRHVp+reRz7A3JOYW03kh+iEpmy05OCkIF4bHqXRz77lY1H0nDb8gElWlHS5WE+3OvCl5brjYR3cLmRmHd+DT2fhEbd4JpHjUu1t88EICuvmKR1s9BuPtDienIKS/gu/xp8yCF7X6mLJGyfN9e3JYuPwvj+zckw+RPvHQG75xF76gzL9yaTE/khFpML8y19OZxexLEWYyFhI0VxGwGMC1Z2zQWfRtDveXD1gps/MU4elk462wdZYrEazUEpMTDwP0Y5O6kqEXRQSmXbXmeA9n++V0pdeNpxlWt2ZBbKxROvSdu58cUfGHznk8y39OV2y2JGNUhlgs96vIpS+LZkAHW9XPHv/RDkphpt59/faVRZb5uDi6srSino/29o1B2W/su46qPzPQC0at+N5aZ+tE5Zjg85NMw/CN5BBATa7q9r0BFS9tOtkSedrEbbaK5Xc65rE8iUuwcbO8iBXxiW/zNPOS9klaUTvSI6n/sgrW4Er/pG51r4WHByNRbr686Q0Y+RafJnju8XTCl8lwIXP47VNc44ndrcQLb24N9qJm3yo6D1MDo28gVgVHgQG/xH4FN4Er4fDUBG3a4AmE2KRwd1YErRWDKt7nzlcS8TiscTcyKbohIr/1p5mg6pr3Csxf18YBnBrnYvcGOHhgAs2WVcUvt7omJLmxcxHV0LCRs50elJTltcWH0ghYgQP4L8PGgR6MnMDUeZUTKEpaofw0/PYVTyu+yv1Q01diljB3ejZb87MVuLuKXWHnYnZED0t+hG3VkRr+jRvDYH/PrTvigab3IYEqIYk/UZO2jFfSdvJXnoTJi0j3HwRkcAACAASURBVE1Nn8CTfPIsJj5Qd/F9vWeJavkU7Qq/5I8es3AeNYNX/d9kYp0ZMGoWuWZvluw+QVLrB1Ba47/hNW7t2ICWCXM549WMEcvNbIhN54Uf9/BYdDDfWAcxtGAprfOjSOowETz8sWBiSvq1qJxTsO9n5m1L4PSOhcYZsq9tvwhsh8XkTGjJYV67uR33e20BIK/5jeQVlfDggQgytScdVt+DZcd3POs0j8YqhTXNnmXBvjzG5z3IXu/e3J/zOSkf25qiljwJc26i0NWfMVkP82DOI1CrDpa5Y3jx/S9I/v5xiv2aQa9JrD2UyqeJISy3dIE/3qEgPZ7UvashYSO/uV7HrZ9sJLv1aEzJ0fx3xgK+Xx0FcWtY59oXDxcnFjzSnR5dr8GqnAglgRUxyQzyMG4NWl3Q4lzfTeubjLPvEzs5cDKbgeadaGVis6UVUfEZRtNPQRan9q9n5b5T6D0/gIsnxwJ6kVNYQlGJlYdTb8VVF/K89QtmzPycO8yr+NZyLQfzvdiTlMV7xbeS49savr/DqPE07Qf9XzTWXzvU6IvY9iW7Dx9j5Pu/4Re/gkVF3Vh39AyHTp0h0tqebO3B6W2laj9HVsHJaP7wH4HZpHikXzP6tqjDnNxukHmMpD1rCCSDrlkr2OR9PapWbXw9nPkgswe4+9M75RsA9h+JMxJd2Agw2Q7BdVsbx5P9i2HvQl74cQ+jp69Cr37NaHZre+ulHvYuSlVXDZm11t62l5fW2qnUe2+7Rna5HV5JQEYU9H0WatVGKcWQdvXJ6zOFZAIYHP0EjxZ8yVprR95PasG4Pk0xt7gOvIOMzqvMYzByFgQ0O7dMZ3cYuxSufxu6PASNewDgZDbR/c4XcFdFzG68Eq+kP6Bhp3Pz1e9odL4e32K0Ifs04oxX83PTm/WHo5GYf3uB9LrdWd9pKk1ql7qR2+wMXceBkztE3F/mY3Zo2Ry/u2cRkB9PsCmNJ/XT7M92AaBf20ZMLxmOBRM5Ae2h8700r+vFx3d15oUbWhMQfjMLSvqQVa87Lxffg4d/g7PLbdfQh/zmQ+lV+AF1h75AscmdvSeyeGpeNIt2JKFdPLnt6A1MKx5B58Z+NPB1p2uIPz/uTGLKz3uNK6eGPwF9J0NIb4IHPIKLk7H7RYT4G/G1rEtWfjGgONbjDZZbuvBlyfUc6vcZuHri6mSmR/8bwd2f4aYN+CStg8yjHAi+nfTcIno0r01u8xtxURZe8vyZkK3/xVScT9Z104hJzqH/O2v5NR7eL7iBcZ4fcFvxy0zLv4H2jQK4Iaw+JqUY0KouAJ0a+RGdkInVqlkRk0xekYV+3btB73/BnvlMyXiOMBXH/zL6kZ5bzA+PdOfObo1wNivaPPg52cO+5KuS6/jF9XoAVsQk801ac46rBugtnzFz6R/4Zu5Ftx527p/n5Eq8U1Oud9pBn7zfubt4ESssEdz/4wlu/Xgj21PgKa93OGH149qD/+EBp+Wsde7Fy3vr8NavB2jXOJCwp37ia497KMpMhDWvUxw9j2P1h7Aw9G325XiyK8OJnGFf4luSyg+ur+BVkslbzo+Tr53537L9eLiYea34brSG7JkjObVgEgXugTwb3w2rhkjXfpTgxAjzHxxa/RVoK9NOtue2iGC6hPjzn1s6Qe1QIkyHyCsqoS/bKXb2Yp8OIc52T80R/95YMbN52WxiE09wl9MqrC1voNDJm4/XHCHetxsWTPw270Ne/XopxdHzsbYexu5kI5E0DvBgXbof833uY4hpKzOd3yLFJZi3Sm7nh6hE8ost5OHGZ6GfktL8NpI9W8Oo2czfeZKeb67m170noe9z6PwMsr+5h2dLPsFDFbLSqT/v/36Ig8lnKMKZ36wR1En8/dwVW5HvgndDZp7pRvsgHzxdnRgZHsT83E5YzG74Hfiex5x+xqStTEkdSJcQP0Z0DmLJ/iwywu6nl3U7HV2SaHRyhXEZbNhtgHFPz9ajGeju441a69J/kbV/LY+k/s+4YmzQa+cShp1U9cM0/pVN11pX8jyEq0xBFlneLfHpOq7M6LHXRZDb+ifMX19PtnsgT2Y+RpsGvoztEWJs/GEfGB1Ene4Gj3I2h8kM3R6+YHRgaDg07kmn+AXGpWb9nj83MfQ6qFUHfv8vnIyG7o9ztpMCYOg7xgG+KIc6QV35j5PLhevtOdGogdSqfeG0pv1QI2ZwMEOxYrkbu20dmx0b+fKE6618lncTW+8ZCN5uxurC6gMwuH0Q3Zc+wma3IBZaEnnHyw1K9cc9f30ranu60L9VHUIDvfhpZxInswqYeG0obs7msx2onRsbN6Tf1KE+L/0cg4vZxGdjwqnl6gT9je3gDnQN8Wd9bBpdzyaCOnweGUdoXU96t27IsFVPAbC1Vb1zQZidoMsDhEdOJZhDFLkHMnF3MI38TdzYvj77Tngwe+MgxrIU9gEDp9C/Z09Wtc5j/Hc7eOaHXRQUW7i/VxOiE06z5WgGHYN9ub5dPTZMHkB9H3cAOjXy5futCcSl5fDjziSC/d2JaOwHQZMg5kc8Tmwm85rJ3B32GM/5eeDj4UxEiD/X+abRuZEfNBrJd5F1qR2XzcP9NZ+uO4LGxIyi6/hv0hymWtPABEfqDODPU4DjGXm8mTuUj1w/w/Tzo1CnFdkdPmDzL8do4OPGZ2MiyMgt5MaFrxDuHE+3Rp64N+tJ0m9H6NeyDi/f1BZlMuPc7xn6LBrCRyNbMGHhQdwTnbimRAFGU8vi9AasK3qCx9uVEFN/JDNWnOC3/4vkeGYe/ze6I0/OtfBL66kM3fsUdVUxT2U9Sh4ueLmZ+fVoMa66E/e4rKEIZw5YGpHs2oQHejU595XoeAddV07hc+dpdMmJIif8MdhoYtaGY2TmFjPu6z185dyaZolLiLAk4eWUB70nMbV1PZ6aF03fD3fyhstAxphXcqPHAQoKTHxhGU1eUhZuziajtjR7Gy1u/TeW/IHkrXwdv5vfx3lmOj9sN27urOftxrqjOSzOv4P49Dy2lrizaMcBkk7n88g3OxjbI4S2gU8x6uRUtEVBv+dpVtCflZFHaVrHEw8XM3u9+jAyNxL9y0TO1GqMd8JGcga8wY5f8xjXpykAA1vXxeTmxU7PPkRkLKeTEyyy9CLOUps7Q/y5pmkAX64/ypvpvfmP/pBpPnMxZSWS49OSrZkBNHPKZcrPMaw7lMqMeyK49uZPscy6no8LXgIzvK7v56GArtS98Ft+WVX1ewRpGL8l8Gf/QKmjFRpoao+g7CJsJDvTAuhXzkG1VlBbeHQDqact1Pr+CG/e2h4nsy0DNx94rjOvuvpNht9ehOEfQ2Dbc+NdakGvp4wOLIB2I+BgqTuSnVzOXY5XEZOp/CTwp7CRtANGpexiQVQitT1d8XR1olkdT46l51HXlgRKq+/jTo9mAfwUbTwSqo6XK7pUImhd35tptxlxtWvgbVuuC+P6NKXYovlw1WECPF2p7Wk0Vd3UoQFrDqZyT/fG9Gt54a48KiKIwhILoXWNJylGNPbHz8OZ7s0CaFXPGxcnE6F1PanrdV6s/Z7n5O7V1D8dxTvZozhoKeCLeyJwczYTFuTLvA4vklarA7XPHIQeEwAI9vfgozs7M+T/Iim2aPqG1iHI153t8ZmEN/ZDKXU2CQDGwRz4dksC62PTeGJAqNEc6OQK9/wEZ07i1zC87DNYwChj071ZAN9tSWBFzCl2J2Zxc8cGfBs9kN5+GVybs4T91mB+S/TgSVvz+XdbE1ilu5J5/90EHvgWIu5jlG8jWjcJolkdT9xdzBxLy6UIZzYVN6dX85Y80KcpQzs2Itjf4+x6h7avz8tLYpj0UyxOJjO5RRZWJUCLQE8Oncrhm83x7LN2ZWL/3twW6MXcmFz2nzzDR3d05ob29Zm64iDL89uw2PI0t/jEsiyzN6PCg8kpLGHp7hOcZCjX1M3CO7AZ3r2eYmejbmU3QvcniI1azaCMtST7RVBv6Cs87RXP278eZPneZNo19KHtwDdwW3QPY4p/56BrGC0bdmZYQ3AxK36ISqLroM9g2Z34Hd/MggbP8MWufEIC0mhT35veoXXY8/Jg3JyN383yam38dlaHoC2sj03D18OZWzs35OO1565++nVvMlHxmdzf00hYMzccBTrh2vpFhvXrBY270zM2jelr41iy6wSt63uDd0feOzCCp6K/wxv4ydKDj7e2pMRaSPdmAQC4OpkZ0rYeE/eOpqu1BYOaurEktzMkQpcQf9o28KZJ7VrMj8kl1GkgD51ZRrLy49HUW/ljtnGprkmBq5OJ5XuTufa2Dqy67jc2LXiX4eEhzNzeBh0Zx4s3trng+3M5VZUIPgD6YzyF9HuMh879fe+nLn3WfT7fYJr5wsbnQy7f+pr0gYcjy58Wcb9x+aqrJ9RrDwfXXb71ljLlpjZsiksnJMBoWnq4bzMy8yq+zn50l2A22i6nrevlSkV3DbZt4M2CKHi0X3M8XIzd6I1bwzCbzm1jXw8XZo7tUuG6hndsyPCODc8OuziZ+GVCb3zcnXFxMjFhQHOa1inncbsmM7HtnsbTKZa0kxHc4erFta2NRONsNvHWqA5AhwtmC/b34M0R7Zmz8RjhIX5c0zSA3qF1aODrfkHZprVr4e3mxKwNx6jn7cYdXUs9P9G7gfGqQs9mtZm14RgTvt9Jszq1+O+wdvyy+yQPpt3BSM8wlHd9du05QVpOISdO5xOVkMnAVnUJDGoOQf85u5x2DX3Ovm8c4EE9bzeSswto19AHJ7OpTBIA8HZzZkjbevwUfYJ7ujfmVHYBK2JOcWvnICMJnMzG3dlMaF1PzCbFV/d3IyOv6GzzY6t6Xqw+mEJRSRgjBt/LukZ+1PZ0YeGORJbsOsFO1RL96EZwcy7/g5tM5Az9kP/NeoNrr/0X9czOPNKnGXuTsth3IpsZ90bg5+UGE6NIXPoWya5htLTNOqRdfYa0M2qo3PE9HF1Ha5/+FHy0gQPJZ4yaOtiSQFntg3xYH5tGhyBfujcL4OO1R2gf5MOp7AI+WBVLsUUzoFVdeoXWpoGvG8v2nKTvbRPB3fgcnRv74epkorDESstAL7r6FLHVexI/JtXD301zuMEYDq09irNZEdH4XOvATR0asCAqkUR60K9zJ/rmFHLgTBxtGnijlOLG9vX5cHUs37jfxUM3j+bVbXUoKTIzo1cTjqXn0qaBNz9sT+T3/acotljZcbKQbxjKczcN5qai3Xy/NYEnBoTi41HB9r4MKk0EWuuJyjjF6YfxGOkPlVK/YdxYdrSyeUUVnN1hzI9GcqosQf1FXm7O/PR4z7PD17UJrLT84Lb18HF3Jiu/mDqVJIJhHRtyOr+Yu7o1Ojuu9EH9UjUsdVAePyC0wnIWJw+8+k3gzQpLlO+mDg24qcO5g3hI6b6XUkwmxdCw+hxOyWH6nZ2p53NhDaoqXZv6G2d7zia+uCcCHw9n2jb0Ydfx0xQ3H0S7Bj4sWLafI6m5NPL3IDu/uEwTS3mUUlzT1J+fok/QtkHF3XT39WzC/pNneKRvM7ILitmXkMqN7euzO/E0iZn5hNmSCICPh3OZg0yLQC9+329cWhne2I9AW+2xZ3OjBtoh2BfvipKATcfmjfB96l0aBxhJymRSTL+zMxarPlfbrlWboNumErt2bfkL8fCHtrfQDqOpbmfC6TJJ8Xwdgn3P/u0S4k+/lnUY3785C7YnMm/7cVydTESEGHW4B3s35cHeZRs03JzNdLE1V7as54VHSQYvD28HGPde9NGa0/nGY0zcXc4loh7NAvCv5UJGbhHtG/rQOMCDe3uEnK0d3ti+AR+ujqVpg7rQtivT23KBMwUlLNqZxJa4DHYmZNKmvjduzmbG9WnGT9EnePHnvRSVWBjbo/L941JVVSPAVgNYo5TaifEE0VcxnhJ6lTwC8G8s0L7VvT/92VRzMdyczYwKD2Le9uP4e5TTN2HjX8uFide2uBzhXbXeHNH+L83v7ebMqze3o1U9r7M1m/BGfuw6fpquTfwZ2q4+CRl53N41mLYNfCi2WHE2V90p+GDvpjSv61np/7VDsC8rnjJu+2mAO6/2dCfIz4N2DX1YtieZDsEVH1Bb1jMuUwzycz+bBIxhD24Iq0/fllU9eNhwfpJVSuFkvrSTngd6NeHJudFGP00FujXxp11Dbwa1CcTN2czs+4yr3tJyCpm3/Thdm/iXW5MorUfzANbHptGqnhdF5z05XinF67eEXTCPk9nELZ0asnT3SRoHeJRpHgRje44MD6JPi4q3W5/QOrg7m5m98Sh7krIYFR4EQJsG3vRtUYclu05Qz9uN9NxC7PFTOVV1FtfC+HnJ0RiPnV4EhNt+j0D8Qz07pBX39WqCyWS/moqjuKtb4zLDfVvW4evNx+jVvDZ+tVx49eZ2Z6ddTBIAo6mosjPjynQMMs6aOwZXfED9MxGUd9CdflfnC8bVhBvbN6BHs9r416r45MTXw4Vfnuh9wfiezWvj5+HM9X82OVViZHgQaWeKCA/xY1PlPyFSxnNDWjFhYOgFSeBP74y6sKmyNHcXM/d0b8xnkXGAcdXanz64vRNJp/NpXd8LpRRr1x66+MAuUlU1ghSMs/+5tr8aiFBKRQBorRdd9ojEFefiZCrTRCMun74t6rDjpevwqqJpxV66Nwvg8zHhDGxdcRNh09qetA/y4Yb2VfeD1KTKkkBlvNyc2fzCQFwuItHW9XJjyk3Vr6m7OJnOXg59qZ4f2prbuzZiS1z62Sv54MKmO3uoKhEswDj4t7S9StMYNQQhRDVcqSQARvPGoLb1Ki3j4mRi8fheNRRRzXB1qrxJ6GrRpHatsvcM1ZCqOovH1lAcQgghrpCqHkN9Y1ULuJgyQgghrl5VNQ1NVUolUfZGsvO9Afxy+UISQghRk6pKBKeAaVWUsesPzgshhLCvqvoI+tVQHEIIIa4Q+z7STgghxFVPEoEQQji4KhOBUsqklOpRE8EIIYSoeVUmAq21FZheA7EIIYS4Ai62aWiVUmqEquhBGkIIIf62LjYRPIzxuImiv/NvFgshhLhQlY+hBtBae9k7ECGEEFfGRSUCAKXUMKCPbXCt1lruJhZCiH+Ai2oaUkq9CTyJ8XPg+4AnlVL/s2dgQgghasbF1giGAh1tVxChlJoD7ASet1dgQgghakZ1bijzLfX+0n4eSQghxFXnYmsEbwA7lVJrMJ5E2geYbLeohBBC1JgqE4FSygRYgWuALrbRz2mtk+0ZmBBCiJpRZSLQWluVUs9qrecDi2sgJiGEEDXoYvsIfldKPa2UClZK+f/5smtkQgghasTFJoLRwONAJBBle22vaial1BCl1EGlVKxS6oI+BaXUJKXUPqXUbqXUKqVU4+oEL4QQ4q+7qKePApO11k3OezWtYj4zxsPqrgfaAHcopdqcV2wnEKG1bg/8ALx9SZ9CCCHEJbvYp48+cwnL7grEaq3jtNZFwFxg+HnLXqO1zrMNbgaCLmE9Qggh/gKlta66kHFncRowD8j9c7zWOqOSeUYCQ7TWD9qGxwDdtNbjKyj/EZCstX6tnGnjgHEAgYGB4XPnzq0y5vLk5OTg6el5SfPa29Uam8RVPRJX9V2tsf3T4urfv3+U1jqi3Ila6ypfwNFyXnFVzDMSmFFqeAzwUQVl78aoEbhWFUt4eLi+VGvWrLnkee3tao1N4qoeiav6rtbY/mlxAdt1BcfVi336aJNqpx9IAoJLDQfZxpWhlLoW+DfQV2tdeAnrEUII8RdU2keglHq21PtR5017o4plbwNClVJNlFIuwO2cdx+CUqoT8BkwTGudUp3AhRBCXB5VdRbfXur9+Q+YG1LZjFrrEmA8sALYD8zXWscopV6xPdIaYCrgCSxQSkUrpeSGNSGEqGFVNQ2pCt6XN3wBrfUyYNl546aUen9tVcsQQghhX1XVCHQF78sbFkII8TdUVY2gg+23iRXgXup3ihXgZtfIhBBC1IhKE4HW2lxTgQghhLgyqvPDNEIIIf6BJBEIIYSDk0QghBAOThKBEEI4OEkEQgjh4CQRCCGEg5NEIIQQDk4SgRBCODhJBEII4eAkEQghhIOTRCCEEA5OEoEQQjg4SQRCCOHgJBEIIYSDk0QghBAOThKBEEI4OEkEQgjh4CQRCCGEg5NEIIQQDk4SgRBCODhJBEII4eAkEQghhIOTRCCEEA5OEoEQQjg4SQRCCOHgJBEIIYSDk0QghBAOThKBEEI4OEkEQgjh4CQRCCGEg5NEIIQQDs6uiUApNUQpdVApFauUmlzO9D5KqR1KqRKl1Eh7xiKEEKJ8dksESikzMB24HmgD3KGUanNesQRgLPCdveIQQghROSc7LrsrEKu1jgNQSs0FhgP7/iygtT5mm2a1YxxCCCEqobTW9lmw0dQzRGv9oG14DNBNaz2+nLKzgV+01j9UsKxxwDiAwMDA8Llz515STDk5OXh6el7SvPZ2tcYmcVWPxFV9V2ts/7S4+vfvH6W1jih3otbaLi9gJDCj1PAY4KMKys4GRl7McsPDw/WlWrNmzSXPa29Xa2wSV/VIXNV3tcb2T4sL2K4rOK7as7M4CQguNRxkGyeEEOIqYs9EsA0IVUo1UUq5ALcDi+24PiGEEJfAbolAa10CjAdWAPuB+VrrGKXUK0qpYQBKqS5KqURgFPCZUirGXvEIIYQonz2vGkJrvQxYdt64KaXeb8NoMhJCCHGFyJ3FQgjh4CQRCCGEg5NEIIQQDk4SgRBCODhJBEII4eAkEQghhIOTRCCEEA5OEoEQQjg4SQRCCOHgJBEIIYSDk0QghBAOThKBEEI4OEkEQgjh4CQRCCGEg5NEIIQQDk4SgRBCODhJBEII4eAkEQghhIOTRCCEEA5OEoEQQjg4SQRCCOHgJBEIIYSDk0QghBAOThKBEEI4OEkEQgjh4CQRCCGEg5NEIIQQDk4SgRBCODhJBEII4eAkEQghhIOTRCCEEA5OEoEQQjg4SQRCCOHgJBEIIYSDk0QghBAOzq6JQCk1RCl1UCkVq5SaXM50V6XUPNv0LUqpEHvGI4QQ4kJ2SwRKKTMwHbgeaAPcoZRqc16xB4BMrXVz4D3gLXvFI4QQonz2rBF0BWK11nFa6yJgLjD8vDLDgTm29z8AA5VSyo4xCSGEOI+THZfdEDheajgR6FZRGa11iVIqCwgA0koXUkqNA8bZBnOUUgcvMaba5y/7KnK1xiZxVY/EVX1Xa2z/tLgaVzTBnongstFafw58/leXo5TarrWOuAwhXXZXa2wSV/VIXNV3tcbmSHHZs2koCQguNRxkG1duGaWUE+ADpNsxJiGEEOexZyLYBoQqpZoopVyA24HF55VZDNxrez8SWK211naMSQghxHns1jRka/MfD6wAzMBMrXWMUuoVYLvWejHwJfC1UioWyMBIFvb0l5uX7OhqjU3iqh6Jq/qu1tgcJi4lJ+BCCOHY5M5iIYRwcJIIhBDCwTlMIqjqcRc1GEewUmqNUmqfUipGKfWkbfzLSqkkpVS07TX0CsR2TCm1x7b+7bZx/kqplUqpw7a/fjUcU8tS2yRaKZWtlJp4pbaXUmqmUipFKbW31Lhyt5EyfGDb53YrpTrXcFxTlVIHbOv+USnlaxsfopTKL7XtPq3huCr83ymlnrdtr4NKqcH2iquS2OaViuuYUiraNr5Gtlklxwf77mNa63/8C6Oz+gjQFHABdgFtrlAs9YHOtvdewCGMR3C8DDx9hbfTMaD2eePeBibb3k8G3rrC/8dkjBtjrsj2AvoAnYG9VW0jYCiwHFDANcCWGo5rEOBke/9WqbhCSpe7Atur3P+d7XuwC3AFmti+s+aajO286e8CU2pym1VyfLDrPuYoNYKLedxFjdBan9Ra77C9PwPsx7jD+mpV+jEgc4Cbr2AsA4EjWuv4KxWA1joS4wq30iraRsOBr7RhM+CrlKpfU3FprX/TWpfYBjdj3MtToyrYXhUZDszVWhdqrY8CsRjf3RqPzfaom9uA7+21/gpiquj4YNd9zFESQXmPu7jiB19lPG21E7DFNmq8rXo3s6abYGw08JtSKkoZj/UACNRan7S9TwYCr0Bcf7qdsl/MK729/lTRNrqa9rv7Mc4c/9REKbVTKbVOKdX7CsRT3v/uatpevYFTWuvDpcbV6DY77/hg133MURLBVUcp5QksBCbq/2/vXkLkqKIwjv8PIYshxuCLEJAQo+NG1BiyEAkuxIURDaiLGAI+yMYgIgiaxWxduRCJBsUgKhJBBMVZiTqCCAoBQ574JLhQxkkiGBElJOPn4p4ONT1dYQZSVSP1/aDpmtM9zelbRd26t6pPSX8CrwLXAxuAacqwtG2bJW2kVIx9MiLurL6oMhbt5HrjKD9K3Aq8n6Gl0F7zdNlGdSJiAjgP7M/QNLBW0m3AM8C7EXF5iyktyXU3ZDtzDzpabbMR+4cLmtjG+tIRLKTcRWsiYjllJe+X9AGApBlJs5L+BfbR4JC4jqRf8/kk8GHmMDMYaubzybbzSluAg5JmMsfO26uiro063+4i4jHgPmBH7kDIqZffc/kbylz8jW3ldJF113l7wYVyNw8C7w1ibbbZqP0DDW9jfekIFlLuohU59/gG8K2kFyvx6rzeA8Cx4f9tOK8VEbFysEw50XiMuWVAHgU+ajOvijlHaF2315C6NpoEHskrO24HzlSG942LiHuA54Ctkv6uxK+Jcr8QImI9MA6caDGvunU3CTwc5YZV12VeB9rKq+Ju4DtJvwwCbbVZ3f6Bprexps+CL5UH5ez6D5SefKLDPDZThnVHgEP5uBd4Bzia8UlgTct5radcsXEYOD5oI0pZ8CngR+Az4MoO2mwFpRjhqkqsk/aidEbTwDnKfOzOujaiXMmxN7e5o8CmlvP6iTJ/PNjOXsv3PpTr+BBwELi/5bxq1x0wke31PbCl7XWZ8beAJ4be20qbXWT/0Og2wjUt0QAAAZlJREFU5hITZmY915epITMzq+GOwMys59wRmJn1nDsCM7Oec0dgZtZz7gjMhkTEbMyteHrJqtVmFcsuf/NgNk9jt6o0+x/7R9KGrpMwa4tHBGYLlPXpX4hyz4YDEXFDxtdFxOdZRG0qItZmfHWU+wAczscd+VHLImJf1pv/JCLGOvtSZrgjMBtlbGhqaFvltTOSbgZeAV7K2MvA25JuoRR225PxPcAXkm6l1L0/nvFxYK+km4A/KL9aNeuMf1lsNiQi/pJ02Yj4z8Bdkk5kYbDfJF0VEacpZRLOZXxa0tURcQq4VtLZymesAz6VNJ5/7waWS3q++W9mNppHBGaLo5rlxThbWZ7F5+qsY+4IzBZnW+X561z+ilLRFmAH8GUuTwG7ACJiWUSsaitJs8XwkYjZfGORNy1PH0saXEJ6RUQcoRzVb8/YU8CbEfEscAp4PONPA69HxE7Kkf8uSrVLsyXF5wjMFijPEWySdLrrXMwuJU8NmZn1nEcEZmY95xGBmVnPuSMwM+s5dwRmZj3njsDMrOfcEZiZ9dx/nNUno7rO7PkAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E2enpb6gFGte"
      },
      "source": [
        "Evaluate neural network"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1dewsTB7XbAh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c4ff8eb9-9b3d-418b-e2c0-21a1f1b48509"
      },
      "source": [
        "results = model0.evaluate(XX_test_n, yy_test_n)\n",
        "\n",
        "print('loss test data: ', results[0])\n",
        "print('mse test data: ', results[1])\n",
        "\n",
        "results = model0.evaluate(XX_train_n, yy_train_n)\n",
        "\n",
        "print('loss train data: ', results[0])\n",
        "print('mse train data: ', results[1])"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "7/7 [==============================] - 0s 3ms/step - loss: 0.2843 - mse: 0.2843\n",
            "loss test data:  0.28434133529663086\n",
            "mse test data:  0.28434133529663086\n",
            "7/7 [==============================] - 0s 2ms/step - loss: 0.2615 - mse: 0.2615\n",
            "loss train data:  0.2615276277065277\n",
            "mse train data:  0.2615276277065277\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}